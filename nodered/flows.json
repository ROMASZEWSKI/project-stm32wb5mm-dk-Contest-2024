[
    {
        "id": "b9d6d847700528fd",
        "type": "tab",
        "label": "Zigbee2mqtt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9fa19268436c19ce",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "LIGHT AUTOMATION",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "63f773f9e000f8bd",
            "68046019.da2bd",
            "9dc506c6ee60bcd2",
            "76b7ffa3.d3a2f",
            "d9e937ee.73a7c8",
            "2b681956.c78bd6",
            "25c028aaf4adf4fd",
            "c6018e3639b53ac7",
            "80b57cd80db15233",
            "d7a29a9cf67bb626",
            "772d23200d624e97",
            "686728d362855652",
            "62bb82a24af74bb9",
            "b91fa6f8f35723bf",
            "21ad67af1132f07c",
            "b789391219cdd41d",
            "f61bd9af8a0f4439",
            "babb862c3e28f2ca",
            "668332c213a89fc9",
            "e8d75b98c57cea03",
            "e24b521241219287",
            "073f8daeb600fee3",
            "75b439fd08569557",
            "41089e09438e2145",
            "e6408f8a46cc53bc",
            "2e533edcda9fc771",
            "153db24b51094cba",
            "bcdc8bcb3e1d2a02",
            "5ce7e4a241bf1e50",
            "f63ce23337217ff5",
            "c75383690a6ce4a9",
            "90d504adde4059f5",
            "a6e74581130e411a",
            "3a9ca77eeeed2d74",
            "dec834a4.768678",
            "0fbc687b432c3d27",
            "6819faa7e05fb6f4",
            "ccccd2d98a50cfe3",
            "d806be4ea05b2683",
            "201a1a7647db5c99",
            "17daee5d9bbda980"
        ],
        "x": 34,
        "y": 3079,
        "w": 1232,
        "h": 622
    },
    {
        "id": "41257453b758372e",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "READ ATTRIBUTES OF PUMP 2",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "4a19eddd2d7c8fd4",
            "adaaa80aeb50ea95",
            "24bcd1891fe8f4fb",
            "9c938fcdd306efb2",
            "c36f90dc2cb77335",
            "d9d074a8ffe2e937",
            "09ae43a3c74e6f41",
            "bbb2000a85e54431",
            "1c665b2e7c720207",
            "36efb21c459becd6",
            "f37f227f39988a70",
            "d11aab3c08a1cc38",
            "de6f7a188208445b",
            "e904c76f9585b31b",
            "7ae9dff4ac7aefd9",
            "9f31466a408956af",
            "e7d312ac8cc882e7",
            "847b77fb72f57bcc"
        ],
        "x": 34,
        "y": 1139,
        "w": 1012,
        "h": 322
    },
    {
        "id": "a1bd53613da424d1",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "READ ATTRIBUTES OF PUMP 1",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "dc37f5f206c3d221",
            "f9aa0672e5cefb3a",
            "d7bbf2049056eb32",
            "3db1cf94ed4a59f6",
            "ce0d15a759c990ff",
            "06a35ddba1fedbc3",
            "6e11c7f0f31b234d",
            "e0dccd058be4d120",
            "a76e51b33c848acc",
            "82e9ad7bfe387146",
            "2065e99f4f6f4b4a",
            "9f83ada99d2c6e2f",
            "7c9480b141cd0bac",
            "0a13a8347423d299",
            "deb8467969e86f21",
            "aadff2bcdcdd9704",
            "bda00c3fcb6b1372",
            "7e7cc566f9e6231b"
        ],
        "x": 34,
        "y": 179,
        "w": 1032,
        "h": 322
    },
    {
        "id": "1315571ccb37045c",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "READ MAIN ATTRIBUTES",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "54e7788b08748ede",
            "0bc144a1cd72a03b",
            "91fd58bef0a0a28c",
            "047c1ba41f9159b0",
            "a042c0f8acb1bc82",
            "1be9512d58ccdea0",
            "a381ad4ed966ec1a",
            "5818d5caf0b08d8a",
            "dcd5e7be4fe15d79",
            "5709a58cc7e0c215",
            "d80d716b4222889f",
            "e2dace910cf516e9",
            "a90e7d8ed6ddbac4",
            "1391ee4232d4fd6d",
            "4b066c279416c40d",
            "bd1d83cfe04138aa",
            "e6a1f564306edb53",
            "0e1c7e33e852e0da",
            "48f94b703d90e76c",
            "28ebf5d838b335c3",
            "fa4f95b14f5e5e40",
            "efb447d22a52123b",
            "71e893298326d9b1",
            "396c7ad07e24b8bd",
            "a6a9f6446e885cc7",
            "e99a62b7c5c68748",
            "bb38c943556a3acc",
            "a8c697aa161f52f8",
            "7bab77b645c604d8",
            "2107814dec950bad",
            "c51d196122269abf",
            "bfcea8185cf1aebe",
            "6ffa35c2838f22a0",
            "4ffad5a618a63e01",
            "c332c4c51bf2eada",
            "1d534cfa3e9da7cf",
            "499cf92c5d9660b5",
            "5748ed39e3d6428b",
            "6f3e29da63d77bcf",
            "625d629758eecff9",
            "431a145392a41fd9",
            "74de3c4d94286c3e",
            "41f2919c371ec424",
            "37954604849ff7d8",
            "e3d2395558482740",
            "149d1109e57ff421",
            "44e52f17cd86ea7c",
            "c74bf711fb9d9748",
            "a2f8dce557ef290b",
            "fefe7e76ae131ca6"
        ],
        "x": 1134,
        "y": 19,
        "w": 632,
        "h": 942
    },
    {
        "id": "dbd2a1ce0a315409",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "SEQUENTIAL READ OF ATTRIBUTES",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3a36a97af252c8a2",
            "a12f8b8ef7334bb6",
            "b25ce8dfd9901094",
            "1ab326feb2446990",
            "4532022c6d68c9c1",
            "297863b0fe846ce7",
            "9c6b95a334f0c522",
            "5eb97fcb30712d2d",
            "852914795e0de142",
            "97246c25a102a772",
            "ec163f1967bdd328",
            "1b6186beec2ffee1",
            "b13ba425e027ad45",
            "5ef682a3dd9f0e05",
            "0c85f04082f43225",
            "0e65c468f4790b61",
            "25544d4d16e753b3"
        ],
        "x": 1134,
        "y": 1139,
        "w": 892,
        "h": 342
    },
    {
        "id": "f1413343fb3f339a",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "MQTT SET REQUEST",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "05d78a4a8c2afb9d",
            "03e5c1af02eadf42",
            "102c966addfe0acd",
            "b985345870ba0b6c",
            "98bed3d7fb13f1ed"
        ],
        "x": 1134,
        "y": 979,
        "w": 612,
        "h": 142
    },
    {
        "id": "453c262dca4aaeb8",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "STATE OF THE CARD AND ZIGBEE2MQTT FOR ACTIVATE MQTT REQUEST OUT",
        "style": {
            "stroke": "#777777",
            "fill": "#ffffff",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "776793e1169e1526",
            "03462981a9378ad7",
            "184484bd86e2a168",
            "81c6b743121c1abc",
            "368a96d9ff606626",
            "6776314fb31c46f9",
            "c512dba2ad836d85",
            "69e369f13a724cb8",
            "2e23522b330cc761",
            "2f5ae7e2.12b908",
            "8f10797f0b238ed8",
            "ea00f5fafebc2060"
        ],
        "x": 1134,
        "y": 1519,
        "w": 552,
        "h": 342
    },
    {
        "id": "bb8be1a6cf7cfbfa",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "STARTUP INITIALIZATION",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "64666357b80a597b",
            "d44ddfd9c6669673",
            "6b6118ac34afa254",
            "35ec38a5ffd362e8",
            "cd57fa15479fbee7"
        ],
        "x": 34,
        "y": 19,
        "w": 572,
        "h": 142
    },
    {
        "id": "a6dc8ec5ad099329",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "PUMP AUTOMATION 1",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "568edbb528180f3a",
            "cd363204a59da49b",
            "bdeb104ea2ce0591",
            "9d4daf3882ad31b5",
            "84ec234159cbb0fc",
            "766ff62c40a59916",
            "189294e5ae22d0d1",
            "7b41c08da83d9740",
            "77c61c0340759a7f",
            "bc12c1db657e8b65",
            "6de2a395b9302ae3",
            "705860dab3aecf1c",
            "cfc105fce5379d0b",
            "b4a2d05bcab747d6",
            "2a3ec1eafe66a15e",
            "ca27bd442bbb8376",
            "82af76181ea9f33d",
            "8078d564b0fdd706",
            "4fac997e48d9bf8a",
            "d8237bbaf6cbd806",
            "e6255c3d9775c909",
            "d380ba959977eef3",
            "a572d78b95a88f4c",
            "e4d0bb47f3737cd2",
            "f46bbdc4afd81787",
            "02a31a80fc148bef",
            "a336b63211a4f133",
            "987838aa9f90f88b"
        ],
        "x": 34,
        "y": 539,
        "w": 1032,
        "h": 562
    },
    {
        "id": "e3b5c1b361b818ad",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "PUMP AUTOMATION 2",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3be281ea4ca349a3",
            "fda63879b365524d",
            "726cfad408f82cad",
            "476215577a4ffb2b",
            "b16314c4c6b25273",
            "62cacb1328188307",
            "05046324b5608ae8",
            "7d01a696bf41b849",
            "96aa9cf3c5fb1747",
            "17133beb3f5e3ac2",
            "8d46527049982b12",
            "68f05db888d9328a",
            "d320bd174f160cb2",
            "89e3e2d3482a3027",
            "0c399c2e4a564074",
            "938c6c81a62669d0",
            "84eb70c9ae22ba61",
            "65af84706713cebe",
            "3d3a1e235f8940d4",
            "1d0f94b709e213da",
            "7b829e09487f3922",
            "d48e95de5f353e24",
            "adb62dc519356486",
            "6d231714ea41112c",
            "088983cee4c9cc9b",
            "eb12691ed8af76e6",
            "fd7b4895fcdfc836",
            "44125a72aa4a8382"
        ],
        "x": 34,
        "y": 1519,
        "w": 1032,
        "h": 562
    },
    {
        "id": "c4fe507b20390538",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "PUMP AUTOMATION 3",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3e574b0edbd0ae51",
            "b04695849fcac90c",
            "407ceb33ae883c85",
            "bb794d21f8c9991f",
            "b74df8dc1372db21",
            "f56b17d08d2de90e",
            "177aba37e226f5c5",
            "64de457dfb3c6718",
            "ba5ddc6340427dfc",
            "0176336954862fa2",
            "a74c69fdf4922f51",
            "53e3e14cc47059d8",
            "e32e5cfd32743026",
            "d6993d1f3ddb2301",
            "76d415903ba70a9c",
            "e5cc1782948c0fd4",
            "96f65a1781c36dc8",
            "3035cf869b6de84c",
            "02a711b19802443d",
            "412a7ed5dedcb343",
            "92ea094d49f4e57e",
            "ec81527728aa7a47",
            "37bc10835972341b",
            "2502bf7382c04404",
            "db91f5438f4db4cd",
            "134ef8f319f75d9e",
            "6cf47a70ede1f947",
            "b88754b172f703e8"
        ],
        "x": 34,
        "y": 2479,
        "w": 1032,
        "h": 562
    },
    {
        "id": "62a636a5e6353ed5",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "READ ATTRIBUTE OF TANK LEVEL",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "43bd21d7149e1cfa",
            "8b6cd716d6d0da20",
            "1943b98af857213a",
            "ee6f7815f5c8abc5",
            "dc32cba1deb891e6"
        ],
        "x": 1134,
        "y": 1879,
        "w": 612,
        "h": 122
    },
    {
        "id": "503c91c9a72bc852",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "DATABASE GROUP",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "b0789a4f738698b7",
            "b984f87a3dc26dd0",
            "3faa52b70ce23220",
            "b425ca5cfaf4b7d7",
            "4a0ba5bb23a9d262",
            "724288f79fa71e7d",
            "a92230f5d0dd3211",
            "9fef4e676b7a4231",
            "0364f75ee9940bee",
            "c58df9f7d6a898c2",
            "d638a990716c82f2"
        ],
        "x": 34,
        "y": 3759,
        "w": 1152,
        "h": 202
    },
    {
        "id": "cee336c71a690199",
        "type": "group",
        "z": "b9d6d847700528fd",
        "name": "READ ATTRIBUTES OF PUMP 3",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "af180bef10ff4ec7",
            "8578351f739426cb",
            "c84bc8588aa42db6",
            "5c253c9f5d0d3f8f",
            "59891675149a5eb2",
            "5d8c1b5ce0e6b3f7",
            "07503a0eab969756",
            "36b35033af56b5f6",
            "ebdbea07e4a15959",
            "e6b2698366abd627",
            "e2cea2baf3dff9eb",
            "b3f62f67d3fb7a91",
            "35764cd92f398cbe",
            "b9a2cdb613411d04",
            "99ee838ff63a08ac",
            "aeec44aa6ab75b1d",
            "57daedd748f11b11"
        ],
        "x": 34,
        "y": 2119,
        "w": 1012,
        "h": 322
    },
    {
        "id": "54e7788b08748ede",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get temperature",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/temperature",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1240,
        "y": 60,
        "wires": [
            [
                "a042c0f8acb1bc82"
            ]
        ]
    },
    {
        "id": "05d78a4a8c2afb9d",
        "type": "mqtt out",
        "z": "b9d6d847700528fd",
        "g": "f1413343fb3f339a",
        "name": "send to Mqtt Topic STM32WB5MM-DK/set",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/1/set",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b06087975a0e7478",
        "x": 1560,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3a36a97af252c8a2",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "master read first attributes every minute",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "{\"read\":{\"attributes\":[\"measuredValue\",\"TemperatureEnv\",\"BatteryVoltage\",\"Humidity\",\"Pressure\",\"AirQuality\",\"Co2\",\"Tvoc\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}",
        "payloadType": "json",
        "x": 1500,
        "y": 1180,
        "wires": [
            [
                "5eb97fcb30712d2d"
            ]
        ]
    },
    {
        "id": "0bc144a1cd72a03b",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get battery voltage",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/BatteryVoltage",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "bfcea8185cf1aebe"
            ]
        ]
    },
    {
        "id": "91fd58bef0a0a28c",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get linkquality",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/linkquality",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1230,
        "y": 220,
        "wires": [
            [
                "1d534cfa3e9da7cf"
            ]
        ]
    },
    {
        "id": "63f773f9e000f8bd",
        "type": "ui_switch",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "label": "State of Light",
        "tooltip": "",
        "group": "ddb5dd88e80aa0b2",
        "order": 20,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 930,
        "y": 3500,
        "wires": [
            [
                "a6e74581130e411a"
            ]
        ]
    },
    {
        "id": "047c1ba41f9159b0",
        "type": "ui_widget_thermometer",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "group": "ddb5dd88e80aa0b2",
        "order": 8,
        "width": 4,
        "height": 6,
        "name": "Temperature",
        "title": "Temperature",
        "numColor": 3,
        "colorTop": "#2196f3",
        "colorMiddle": "#8bc34a",
        "colorBottom": "#f44336",
        "unit": "°C",
        "scale": "normal",
        "minTemp": "-10",
        "maxTemp": "80",
        "minTempMoreThanMaxTemp": "1",
        "numberOfDecimals": "2",
        "showPercentage": "0",
        "currentTempFontSize": "1.2",
        "x": 1650,
        "y": 60,
        "wires": []
    },
    {
        "id": "a042c0f8acb1bc82",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"temperature\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 60,
        "wires": [
            [
                "047c1ba41f9159b0",
                "4ffad5a618a63e01"
            ]
        ]
    },
    {
        "id": "1be9512d58ccdea0",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Link quality",
        "group": "ddb5dd88e80aa0b2",
        "order": 9,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Link quality",
        "label": "lqi",
        "format": "{{value}}",
        "min": 0,
        "max": "255",
        "colors": [
            "#b30000",
            "#e6d200",
            "#0f7d0d"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 1670,
        "y": 220,
        "wires": []
    },
    {
        "id": "a381ad4ed966ec1a",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Battery voltage",
        "group": "ddb5dd88e80aa0b2",
        "order": 10,
        "width": 6,
        "height": 3,
        "gtype": "wave",
        "title": "Battery voltage",
        "label": "V",
        "format": "{{value}}",
        "min": "2.5",
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1660,
        "y": 140,
        "wires": []
    },
    {
        "id": "5818d5caf0b08d8a",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get temperature",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/TemperatureEnv",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1240,
        "y": 300,
        "wires": [
            [
                "5709a58cc7e0c215"
            ]
        ]
    },
    {
        "id": "dcd5e7be4fe15d79",
        "type": "ui_widget_thermometer",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "group": "85d76405d0f526d7",
        "order": 1,
        "width": 5,
        "height": 6,
        "name": "Environment Temperature ",
        "title": "EnvironmentTemperature",
        "numColor": 3,
        "colorTop": "#2196f3",
        "colorMiddle": "#8bc34a",
        "colorBottom": "#f44336",
        "unit": "°C",
        "scale": "normal",
        "minTemp": "-10",
        "maxTemp": "80",
        "minTempMoreThanMaxTemp": "1",
        "numberOfDecimals": "2",
        "showPercentage": "0",
        "currentTempFontSize": "1.2",
        "x": 1630,
        "y": 300,
        "wires": []
    },
    {
        "id": "5709a58cc7e0c215",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"EnvTemperature\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 300,
        "wires": [
            [
                "dcd5e7be4fe15d79",
                "5748ed39e3d6428b"
            ]
        ]
    },
    {
        "id": "d80d716b4222889f",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get relative humidity",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/Humidity",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1250,
        "y": 380,
        "wires": [
            [
                "e2dace910cf516e9"
            ]
        ]
    },
    {
        "id": "e2dace910cf516e9",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"RelativeHumidity\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 380,
        "wires": [
            [
                "a90e7d8ed6ddbac4",
                "c74bf711fb9d9748"
            ]
        ]
    },
    {
        "id": "a90e7d8ed6ddbac4",
        "type": "ui_widget_humidity_tree",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "group": "85d76405d0f526d7",
        "order": 2,
        "width": 7,
        "height": 6,
        "name": "Relative Humidity",
        "title": "Relative Humidity",
        "colorHumidMax": "#006000",
        "colorHumidMin": "#945818",
        "x": 1650,
        "y": 380,
        "wires": []
    },
    {
        "id": "1391ee4232d4fd6d",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get pressure",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/Pressure",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1230,
        "y": 460,
        "wires": [
            [
                "4b066c279416c40d"
            ]
        ]
    },
    {
        "id": "4b066c279416c40d",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Pressure\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 460,
        "wires": [
            [
                "bd1d83cfe04138aa",
                "625d629758eecff9"
            ]
        ]
    },
    {
        "id": "bd1d83cfe04138aa",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Atmospheric Pressure",
        "group": "85d76405d0f526d7",
        "order": 3,
        "width": 7,
        "height": 6,
        "gtype": "gage",
        "title": "Atmospheric Pressure",
        "label": "hPa",
        "format": "{{value}}",
        "min": "960",
        "max": "1070",
        "colors": [
            "#b30000",
            "#046c15",
            "#f3e012"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1640,
        "y": 460,
        "wires": []
    },
    {
        "id": "e6a1f564306edb53",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get Co2",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/Co2",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1210,
        "y": 540,
        "wires": [
            [
                "0e1c7e33e852e0da"
            ]
        ]
    },
    {
        "id": "0e1c7e33e852e0da",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Co2\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 540,
        "wires": [
            [
                "48f94b703d90e76c",
                "431a145392a41fd9"
            ]
        ]
    },
    {
        "id": "48f94b703d90e76c",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Co2 Level",
        "group": "85d76405d0f526d7",
        "order": 18,
        "width": 6,
        "height": 5,
        "gtype": "gage",
        "title": "Co2 Level",
        "label": "ppm",
        "format": "{{value}}",
        "min": "100",
        "max": "40000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1000",
        "seg2": "4000",
        "diff": false,
        "className": "",
        "x": 1680,
        "y": 540,
        "wires": []
    },
    {
        "id": "28ebf5d838b335c3",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get Air Quality",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/AirQuality",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "fa4f95b14f5e5e40"
            ]
        ]
    },
    {
        "id": "fa4f95b14f5e5e40",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"AirQuality\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 620,
        "wires": [
            [
                "efb447d22a52123b",
                "44e52f17cd86ea7c"
            ]
        ]
    },
    {
        "id": "efb447d22a52123b",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Air quality",
        "group": "85d76405d0f526d7",
        "order": 19,
        "width": 6,
        "height": 5,
        "gtype": "gage",
        "title": "Air Quality",
        "label": "",
        "format": "{{value}}",
        "min": "1",
        "max": "5",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "2",
        "seg2": "3",
        "diff": false,
        "className": "",
        "x": 1680,
        "y": 620,
        "wires": []
    },
    {
        "id": "71e893298326d9b1",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get Tvoc",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/Tvoc",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1220,
        "y": 700,
        "wires": [
            [
                "396c7ad07e24b8bd",
                "6ffa35c2838f22a0"
            ]
        ]
    },
    {
        "id": "396c7ad07e24b8bd",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Tvoc\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 700,
        "wires": [
            [
                "a6a9f6446e885cc7",
                "fefe7e76ae131ca6"
            ]
        ]
    },
    {
        "id": "a6a9f6446e885cc7",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Tvoc",
        "group": "85d76405d0f526d7",
        "order": 20,
        "width": 6,
        "height": 5,
        "gtype": "gage",
        "title": "Tvoc",
        "label": "pbm",
        "format": "{{value}}",
        "min": "100",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "500",
        "diff": false,
        "className": "",
        "x": 1690,
        "y": 700,
        "wires": []
    },
    {
        "id": "f9aa0672e5cefb3a",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "get temperature Plant 1",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantTemperature1",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 220,
        "wires": [
            [
                "d7bbf2049056eb32"
            ]
        ]
    },
    {
        "id": "dc37f5f206c3d221",
        "type": "ui_widget_thermometer",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "group": "c4df573d69f7bde3",
        "order": 1,
        "width": 6,
        "height": 6,
        "name": "Environment Temperature ",
        "title": "Soil Temperature",
        "numColor": 3,
        "colorTop": "#2196f3",
        "colorMiddle": "#8bc34a",
        "colorBottom": "#f44336",
        "unit": "°C",
        "scale": "normal",
        "minTemp": "-10",
        "maxTemp": "80",
        "minTempMoreThanMaxTemp": "1",
        "numberOfDecimals": "2",
        "showPercentage": "0",
        "currentTempFontSize": "1.2",
        "x": 930,
        "y": 220,
        "wires": []
    },
    {
        "id": "d7bbf2049056eb32",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Plant/1/Temperature\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "dc37f5f206c3d221",
                "aadff2bcdcdd9704"
            ]
        ]
    },
    {
        "id": "e99a62b7c5c68748",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "group": "ddb5dd88e80aa0b2",
        "order": 24,
        "width": 4,
        "height": 1,
        "name": "Luminosity",
        "label": "Luminosity :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1670,
        "y": 780,
        "wires": []
    },
    {
        "id": "bb38c943556a3acc",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get Luminosity",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/Luminosity",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1230,
        "y": 780,
        "wires": [
            [
                "a8c697aa161f52f8"
            ]
        ]
    },
    {
        "id": "a8c697aa161f52f8",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Luminosity\";\nmsg.payload = Number(msg.payload);\nglobal.set(\"Luminosity\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 780,
        "wires": [
            [
                "e99a62b7c5c68748",
                "37954604849ff7d8"
            ]
        ]
    },
    {
        "id": "7bab77b645c604d8",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "group": "ddb5dd88e80aa0b2",
        "order": 23,
        "width": 4,
        "height": 1,
        "name": "WhiteLuminosity",
        "label": "White Luminosity :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1660,
        "y": 860,
        "wires": []
    },
    {
        "id": "2107814dec950bad",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "get White Luminosity",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/WhiteLuminosity",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1250,
        "y": 860,
        "wires": [
            [
                "c51d196122269abf"
            ]
        ]
    },
    {
        "id": "c51d196122269abf",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"WhiteLuminosity\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 860,
        "wires": [
            [
                "7bab77b645c604d8",
                "e3d2395558482740"
            ]
        ]
    },
    {
        "id": "3db1cf94ed4a59f6",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "get soil humidity Plant 1",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantSoilMoisture1",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "ce0d15a759c990ff"
            ]
        ]
    },
    {
        "id": "ce0d15a759c990ff",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Plant/1/SoilMoisture\";\nmsg.payload = parseInt(msg.payload);\nglobal.set(\"SoilMoisture1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "06a35ddba1fedbc3",
                "7e7cc566f9e6231b"
            ]
        ]
    },
    {
        "id": "06a35ddba1fedbc3",
        "type": "ui_widget_humidity_tree",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "group": "c4df573d69f7bde3",
        "order": 2,
        "width": 6,
        "height": 6,
        "name": "Soil Moisture",
        "title": "Soil Moisture",
        "colorHumidMax": "#006000",
        "colorHumidMin": "#945818",
        "x": 970,
        "y": 280,
        "wires": []
    },
    {
        "id": "6e11c7f0f31b234d",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "group": "c4df573d69f7bde3",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "MACDS Plant 1",
        "label": "MACDS Plant 1 :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 340,
        "wires": []
    },
    {
        "id": "e0dccd058be4d120",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "get MACDS1",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantMACDS1",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "6e11c7f0f31b234d",
                "deb8467969e86f21"
            ]
        ]
    },
    {
        "id": "a76e51b33c848acc",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "get Water Alimentation 1",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantWaterAlimentation1",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 400,
        "wires": [
            [
                "2065e99f4f6f4b4a"
            ]
        ]
    },
    {
        "id": "82e9ad7bfe387146",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "group": "c4df573d69f7bde3",
        "order": 5,
        "width": 7,
        "height": 1,
        "name": "WaterAlimentation Plant 1",
        "label": "Water Alim. Time Remaining in Ms :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 400,
        "wires": []
    },
    {
        "id": "2065e99f4f6f4b4a",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "to numeric",
        "func": "var msg = {payload:Number(msg.payload)}\nglobal.set(\"WaterAlimentation1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "82e9ad7bfe387146"
            ]
        ]
    },
    {
        "id": "9f83ada99d2c6e2f",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "get Water Alimentation State 1",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantWaterAlimentationState1",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 460,
        "wires": [
            [
                "0a13a8347423d299"
            ]
        ]
    },
    {
        "id": "7c9480b141cd0bac",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "group": "c4df573d69f7bde3",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "Water Pump State  Plant 1",
        "label": "Water Pump State  :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 460,
        "wires": []
    },
    {
        "id": "0a13a8347423d299",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "to numeric",
        "func": "var val = Number(msg.payload);\nglobal.set(\"WaterAlimentationState1\",val);\nvar msg = {payload:(val==0)?'OFF':'ON',state: val}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 460,
        "wires": [
            [
                "7c9480b141cd0bac"
            ]
        ]
    },
    {
        "id": "4a19eddd2d7c8fd4",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "get temperature Plant 2",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantTemperature2",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "24bcd1891fe8f4fb"
            ]
        ]
    },
    {
        "id": "adaaa80aeb50ea95",
        "type": "ui_widget_thermometer",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "group": "d5e9d849d4e0de52",
        "order": 1,
        "width": 6,
        "height": 6,
        "name": "Environment Temperature ",
        "title": "Soil Temperature",
        "numColor": 3,
        "colorTop": "#2196f3",
        "colorMiddle": "#8bc34a",
        "colorBottom": "#f44336",
        "unit": "°C",
        "scale": "normal",
        "minTemp": "-10",
        "maxTemp": "80",
        "minTempMoreThanMaxTemp": "1",
        "numberOfDecimals": "2",
        "showPercentage": "0",
        "currentTempFontSize": "1.2",
        "x": 910,
        "y": 1180,
        "wires": []
    },
    {
        "id": "24bcd1891fe8f4fb",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Plant/2/Temperature\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1180,
        "wires": [
            [
                "adaaa80aeb50ea95",
                "9f31466a408956af"
            ]
        ]
    },
    {
        "id": "9c938fcdd306efb2",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "get soil humidity Plant 2",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantSoilMoisture2",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "e904c76f9585b31b"
            ]
        ]
    },
    {
        "id": "c36f90dc2cb77335",
        "type": "ui_widget_humidity_tree",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "group": "d5e9d849d4e0de52",
        "order": 2,
        "width": 6,
        "height": 6,
        "name": "Soil Moisture",
        "title": "Soil Moisture",
        "colorHumidMax": "#006000",
        "colorHumidMin": "#945818",
        "x": 950,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d9d074a8ffe2e937",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "group": "d5e9d849d4e0de52",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "MACDS Plant 2",
        "label": "MACDS Plant 2 :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 940,
        "y": 1300,
        "wires": []
    },
    {
        "id": "09ae43a3c74e6f41",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "get MACDS2",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantMACDS2",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "d9d074a8ffe2e937",
                "7ae9dff4ac7aefd9"
            ]
        ]
    },
    {
        "id": "bbb2000a85e54431",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "get Water Alimentation 2",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantWaterAlimentation2",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "36efb21c459becd6"
            ]
        ]
    },
    {
        "id": "1c665b2e7c720207",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "group": "d5e9d849d4e0de52",
        "order": 5,
        "width": 7,
        "height": 1,
        "name": "WaterAlimentation Plant 2",
        "label": "Water Alim. Time Remaining in Ms :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 1360,
        "wires": []
    },
    {
        "id": "36efb21c459becd6",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "to numeric",
        "func": "var msg = { payload: Number(msg.payload) }\nglobal.set(\"WaterAlimentation2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1360,
        "wires": [
            [
                "1c665b2e7c720207"
            ]
        ]
    },
    {
        "id": "f37f227f39988a70",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "get Water Alimentation State 2",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantWaterAlimentationState2",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "de6f7a188208445b"
            ]
        ]
    },
    {
        "id": "d11aab3c08a1cc38",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "group": "d5e9d849d4e0de52",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "Water Pump State  Plant 2",
        "label": "Water Pump State  :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 1420,
        "wires": []
    },
    {
        "id": "de6f7a188208445b",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "to numeric",
        "func": "var val = Number(msg.payload);\nglobal.set(\"WaterAlimentationState2\",val);\nvar msg = {payload:(val==0)?'OFF':'ON',state: val}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1420,
        "wires": [
            [
                "d11aab3c08a1cc38"
            ]
        ]
    },
    {
        "id": "bfcea8185cf1aebe",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"BatteryVoltage\";\nmsg.payload = Number(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 140,
        "wires": [
            [
                "a381ad4ed966ec1a",
                "a2f8dce557ef290b"
            ]
        ]
    },
    {
        "id": "e904c76f9585b31b",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Plant/2/SoilMoisture\";\nmsg.payload = parseInt(msg.payload);\nglobal.set(\"SoilMoisture2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1240,
        "wires": [
            [
                "c36f90dc2cb77335",
                "847b77fb72f57bcc"
            ]
        ]
    },
    {
        "id": "03e5c1af02eadf42",
        "type": "switch",
        "z": "b9d6d847700528fd",
        "g": "f1413343fb3f339a",
        "name": "sendmqtt if activated",
        "property": "StateSendMqtt",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1460,
        "y": 1080,
        "wires": [
            [
                "b985345870ba0b6c"
            ]
        ]
    },
    {
        "id": "776793e1169e1526",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "get bridge state",
        "topic": "zigbee2mqtt/bridge/state",
        "qos": "2",
        "datatype": "json",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1240,
        "y": 1560,
        "wires": [
            [
                "03462981a9378ad7"
            ]
        ]
    },
    {
        "id": "03462981a9378ad7",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "state",
        "func": "global.set(\"bridgewstate\", msg.payload.state);\nvar msg = { payload: msg.payload.state };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1560,
        "wires": [
            [
                "184484bd86e2a168"
            ]
        ]
    },
    {
        "id": "184484bd86e2a168",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "group": "ddb5dd88e80aa0b2",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Zigbee2mqtt State :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1570,
        "y": 1560,
        "wires": []
    },
    {
        "id": "81c6b743121c1abc",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "get stm32wb5 state",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/availability",
        "qos": "2",
        "datatype": "json",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1250,
        "y": 1640,
        "wires": [
            [
                "368a96d9ff606626"
            ]
        ]
    },
    {
        "id": "368a96d9ff606626",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "state",
        "func": "global.set(\"stm32state\",msg.payload.state);\nvar msg = { payload: msg.payload.state };\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1640,
        "wires": [
            [
                "6776314fb31c46f9"
            ]
        ]
    },
    {
        "id": "6776314fb31c46f9",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "group": "ddb5dd88e80aa0b2",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Stm32wb5 State :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1570,
        "y": 1640,
        "wires": []
    },
    {
        "id": "2f5ae7e2.12b908",
        "type": "debug",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1820,
        "wires": []
    },
    {
        "id": "8f10797f0b238ed8",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "get bridge info",
        "topic": "zigbee2mqtt/bridge/info",
        "qos": "2",
        "datatype": "json",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1230,
        "y": 1820,
        "wires": [
            [
                "2f5ae7e2.12b908"
            ]
        ]
    },
    {
        "id": "64666357b80a597b",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "bb8be1a6cf7cfbfa",
        "name": "Event at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "file",
                "v": "/home/debian/nodered/scheduler.txt",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "d44ddfd9c6669673"
            ]
        ]
    },
    {
        "id": "d44ddfd9c6669673",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "bb8be1a6cf7cfbfa",
        "name": "startup function",
        "func": "global.set(\"Latitude\", 42.6887);\nglobal.set(\"Longitude\", 2.8948);\nglobal.set(\"Tz\",3600);\nglobal.set(\"timezone\",\"Europe/Paris\");\nglobal.set(\"language\",\"en-GB\");\n// full, long, medium, short\nglobal.set(\"styledate\",\"full\");\nglobal.set(\"styletime\",\"short\")\nglobal.set('StateSendMqtt', 0);\nglobal.set(\"StateLightSheduler\", 0);\nglobal.set(\"CurrentStateLight\", 0);\nglobal.set(\"LightStateHasBeenRead\",0);\nglobal.set(\"CurrentTankLevel\", 0);\nglobal.set(\"TankLevelHasBeenRead\", 0);\nglobal.set(\"DesiredStateLight\",0);\nglobal.set(\"WaterAlimentation1\",0);\nglobal.set(\"WaterAlimentationState1\",0);\nglobal.set(\"SurveyStep1\",0);\nglobal.set(\"CycleCount1\",0);\n\nglobal.set(\"WaterAlimentation2\",0);\nglobal.set(\"WaterAlimentationState2\",0);\nglobal.set(\"SurveyStep2\",0);\nglobal.set(\"CycleCount2\",0);\n\nglobal.set(\"WaterAlimentation3\",0);\nglobal.set(\"WaterAlimentationState3\",0);\nglobal.set(\"SurveyStep3\",0);\nglobal.set(\"CycleCount3\",0);\n\n\nif (typeof global.get(\"LightAutomation\") === 'undefined')\n    global.set(\"LightAutomation\",0); \nif (typeof global.get(\"LightLimit\") === 'undefined')\n    global.set(\"LightLimit\", 300);      \nif (typeof global.get(\"TimePump1\") === 'undefined')\n    global.set(\"TimePump1\", 4000);\nif (typeof global.get(\"DelayTimePump1\") === 'undefined')\n    global.set(\"DelayTimePump1\", 1);   \nif (typeof global.get(\"BelowSoilHumidity1\") === 'undefined')\n    global.set(\"BelowSoilHumidity1\", 40);\nif (typeof global.get(\"MaxWateringCycle1\") === 'undefined')\n    global.set(\"MaxWateringCycle1\", 40);  \nif (typeof global.get(\"ActivateSurvey\") === 'undefined')\n    global.set(\"ActivateSurvey\", 0);\nmsg.topic = \"load\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.topic = \"save\";\nreturn msg;",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "6b6118ac34afa254"
            ]
        ]
    },
    {
        "id": "a12f8b8ef7334bb6",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "start read attributes Plant 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"read\":{\"attributes\":[\"Luminosity\",\"WhiteLuminosity\",\"PlantTemperature1\",\"PlantSoilMoisture1\",\"PlantMACDS1\",\"PlantWaterAlimentation1\",\"PlantWaterAlimentationState1\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 1240,
        "wires": [
            [
                "5eb97fcb30712d2d"
            ]
        ]
    },
    {
        "id": "b25ce8dfd9901094",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "start read Attributes Plant 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"read\":{\"attributes\":[\"PlantTemperature2\",\"PlantSoilMoisture2\",\"PlantMACDS2\",\"PlantWaterAlimentation2\",\"PlantWaterAlimentationState2\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 1300,
        "wires": [
            [
                "5eb97fcb30712d2d"
            ]
        ]
    },
    {
        "id": "1ab326feb2446990",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "start read Attributes Plant 3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"read\":{\"attributes\":[\"PlantTemperature3\",\"PlantSoilMoisture3\",\"PlantMACDS3\",\"PlantWaterAlimentation3\",\"PlantWaterAlimentationState3\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 1360,
        "wires": [
            [
                "5eb97fcb30712d2d"
            ]
        ]
    },
    {
        "id": "4532022c6d68c9c1",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1360,
        "wires": [
            [
                "1ab326feb2446990"
            ]
        ]
    },
    {
        "id": "297863b0fe846ce7",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1300,
        "wires": [
            [
                "b25ce8dfd9901094"
            ]
        ]
    },
    {
        "id": "9c6b95a334f0c522",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1240,
        "wires": [
            [
                "a12f8b8ef7334bb6"
            ]
        ]
    },
    {
        "id": "68046019.da2bd",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Is it night time yet? ",
        "func": "var time = new Date();\nvar timeNow = time.getTime();\n\nvar sunsetToday  = global.get('Time_sunset');\nvar sunriseToday = global.get('Time_sunrise');\n\n\nif(timeNow < sunsetToday || timeNow > sunriseToday){\n    msg.payload = \"it's night\"\n    var x = \"Night\";\n    global.set(\"DayOrNight\", \"Night\");\n    \n}\n\nif(timeNow > sunriseToday && timeNow < sunsetToday){\n    msg.payload = \"it's day\";\n    global.set(\"DayOrNight\", \"Day\");\n    \n}\nmsg.payload = global.get(\"DayOrNight\");\nmsg.times = {\n    \"sunset\": sunsetToday,\n    \"sunrise\": sunriseToday,\n    \"time\": timeNow\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3280,
        "wires": [
            [
                "9dc506c6ee60bcd2"
            ]
        ]
    },
    {
        "id": "9dc506c6ee60bcd2",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "group": "ddb5dd88e80aa0b2",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Day or Night :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 3280,
        "wires": []
    },
    {
        "id": "76b7ffa3.d3a2f",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Save Recalculated times (the easy way)",
        "func": "let date = new Date();\nmsg.payload.results.tmoff = 0;\nfunction recalculateTime(x){\n    var z = new Date(x).valueOf();\n    var adjustedTime = z;\n    return new Date(adjustedTime);\n}\n\nfunction secondsToHms(d) {\n    d = Number(d);\n\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n\n    return ('0' + h).slice(-2) + \"h \" + ('0' + m).slice(-2)+\"min\";\n}\n\nfunction stringtodate(timenow){\n    let date1 = Date.parse(timenow);\n    return date1;\n    \n}\n\n\n\n//sunrise\nvar sunrise = recalculateTime(msg.payload.results.sunrise);\nglobal.set('Time_sunrise', stringtodate(sunrise));\n\n\n//sunset\nvar sunset = recalculateTime(msg.payload.results.sunset);\nglobal.set('Time_sunset', stringtodate(sunset));\n\n//solar_noon\nvar solar_noon = recalculateTime(msg.payload.results.solar_noon);\nglobal.set('Time_solar_noon', solar_noon);\n\n//day_length\nvar day_length =  secondsToHms(msg.payload.results.day_length);\nglobal.set('Time_day_length', day_length);\n\n//civil_twilight_begin\nvar civil_twilight_begin = recalculateTime(msg.payload.results.civil_twilight_begin);\nglobal.set('Time_civil_twilight_begin', civil_twilight_begin);\n\n//civil_twilight_end\nvar civil_twilight_end = recalculateTime(msg.payload.results.civil_twilight_end);\nglobal.set('Time_civil_twilight_end', civil_twilight_end);\n\n//nautical_twilight_begin\nvar nautical_twilight_begin = recalculateTime(msg.payload.results.nautical_twilight_begin);\nglobal.set('Time_nautical_twilight_begin', nautical_twilight_begin);\n\n//nautical_twilight_end\nvar nautical_twilight_end = recalculateTime(msg.payload.results.nautical_twilight_end);\nglobal.set('Time_nautical_twilight_end', nautical_twilight_end);\n\n//astronomical_twilight_begin\nvar astronomical_twilight_begin = recalculateTime(msg.payload.results.astronomical_twilight_begin);\nglobal.set('Time_astronomical_twilight_begin', astronomical_twilight_begin);\n\n//astronomical_twilight_end\nvar astronomical_twilight_end = recalculateTime(msg.payload.results.astronomical_twilight_end);\nglobal.set('Time_astronomical_twilight_end', astronomical_twilight_end);\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "d9e937ee.73a7c8",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Get Sunset info",
        "func": "var latitude = global.get('Latitude');\nvar longitude = global.get('Longitude');\n\n\nmsg.url = \"https://api.sunrise-sunset.org/json?&formatted=0&lat=\"+ latitude +\"&lng=\"+ longitude+\"&tzid=Europe/Paris\";\n\nreturn msg;\n\n//https://sunrise-sunset.org/api\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3120,
        "wires": [
            [
                "2b681956.c78bd6"
            ]
        ]
    },
    {
        "id": "2b681956.c78bd6",
        "type": "http request",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 3120,
        "wires": [
            [
                "76b7ffa3.d3a2f"
            ]
        ]
    },
    {
        "id": "25c028aaf4adf4fd",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "group": "ddb5dd88e80aa0b2",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Clock :",
        "format": "{{msg.datestring}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 3160,
        "wires": []
    },
    {
        "id": "c6018e3639b53ac7",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "DateTime",
        "func": "// msg.language is the language code in the form xx-YY. \n// Most of the language codes from here should work: http://www.lingoes.net/en/translator/langcode.htm\n// If no msg.language code is selected, then en-US is default.\n//\n// msg.payload contain the date\n// The script will try to parse a human written datetime, like december 1, 2033 11:25 AM GMT+1\n// If this can not be passed correctly, then it will try to read it as a timestamp value instead\n// Timestamps from within Node-Red works perfectly, but timestamps coming from HA might be missing some digits,\n// so you need to add the missing zeros in the end by *10000 or whatever is missing to reach the same number\n// of digits as Node-Red timestamps.\n\n// more info on the date objects used: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n// more info on localization of datetime: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n\n\nif (!msg.language) { msg.language = global.get(\"language\");}\nif (!msg.styledate) { msg.styledate = global.get(\"styledate\"); }\nif (!msg.styletime) { msg.styletime = global.get(\"styletime\"); }\n\nvar input = Date.parse(msg.payload+(global.get(\"Tz\")*1000));\nif (isNaN(input)) { input = msg.payload + (global.get(\"Tz\") * 1000) }\nvar dateobject = new Date(input)\n\nmsg.timevalue = dateobject.valueOf();\n\nmsg.datestring = new Intl.DateTimeFormat(msg.language, { dateStyle: msg.styledate, timeStyle: msg.styletime}).format(dateobject);\nmsg.date = dateobject.getDate(); //\n\nmsg.month = new Intl.DateTimeFormat(msg.language, { month: 'numeric' }).format(dateobject);\nmsg.monthshort = new Intl.DateTimeFormat(msg.language, { month: 'short' }).format(dateobject);\nmsg.monthlong = new Intl.DateTimeFormat(msg.language, { month: 'long' }).format(dateobject);\n\nmsg.year = new Intl.DateTimeFormat(msg.language, { year: 'numeric' }).format(dateobject);\nmsg.year2 = new Intl.DateTimeFormat(msg.language, { year: '2-digit' }).format(dateobject);\n\nmsg.day = dateobject.getDay();\nmsg.dayshort = new Intl.DateTimeFormat(msg.language, { weekday: 'short' }).format(dateobject);\nmsg.daylong = new Intl.DateTimeFormat(msg.language, { weekday: 'long' }).format(dateobject);\n\nmsg.hour24 = new Intl.DateTimeFormat(msg.language, { hour: 'numeric', hour12: false }).format(dateobject);\nmsg.hour24_2 = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: false }).format(dateobject);\nmsg.hour12 = new Intl.DateTimeFormat(msg.language, { hour: 'numeric', hour12: true }).format(dateobject).split(\" \")[0];\nmsg.hour12_2 = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: true }).format(dateobject).split(\" \")[0];\nmsg.hour12prefix = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: true }).format(dateobject).split(\" \")[1];\n\nmsg.minute = dateobject.getMinutes();\nmsg.minute2 = new Intl.DateTimeFormat(msg.language, { minute: '2-digit' }).format(dateobject);\n\nmsg.second = dateobject.getSeconds();\nmsg.second2 = new Intl.DateTimeFormat(msg.language, { second: '2-digit' }).format(dateobject);\n\nmsg.timezone = new Intl.DateTimeFormat('en-US', { timeZoneName: 'short' }).format(dateobject).split(\" \")[1];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3160,
        "wires": [
            [
                "25c028aaf4adf4fd"
            ]
        ]
    },
    {
        "id": "80b57cd80db15233",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3200,
        "wires": [
            [
                "c6018e3639b53ac7",
                "686728d362855652",
                "21ad67af1132f07c",
                "68046019.da2bd"
            ]
        ]
    },
    {
        "id": "d7a29a9cf67bb626",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "group": "ddb5dd88e80aa0b2",
        "order": 3,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Sunrise Time :",
        "format": "{{msg.datestring}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 3200,
        "wires": []
    },
    {
        "id": "772d23200d624e97",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "DateTime",
        "func": "// msg.language is the language code in the form xx-YY. \n// Most of the language codes from here should work: http://www.lingoes.net/en/translator/langcode.htm\n// If no msg.language code is selected, then en-US is default.\n//\n// msg.payload contain the date\n// The script will try to parse a human written datetime, like december 1, 2033 11:25 AM GMT+1\n// If this can not be passed correctly, then it will try to read it as a timestamp value instead\n// Timestamps from within Node-Red works perfectly, but timestamps coming from HA might be missing some digits,\n// so you need to add the missing zeros in the end by *10000 or whatever is missing to reach the same number\n// of digits as Node-Red timestamps.\n\n// more info on the date objects used: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n// more info on localization of datetime: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n\n\nif (!msg.language) { msg.language = global.get(\"language\");}\nif (!msg.styledate) { msg.styledate = global.get(\"styledate\"); }\nif (!msg.styletime) { msg.styletime = global.get(\"styletime\"); }\n\nvar input = Date.parse(msg.payload+(global.get(\"Tz\")*1000));\nif (isNaN(input)) { input = msg.payload + (global.get(\"Tz\") * 1000) }\nvar dateobject = new Date(input)\n\nmsg.timevalue = dateobject.valueOf();\nif (msg.styledate==\"none\")\n    msg.datestring = dateobject.toLocaleTimeString(msg.language);\nelse\n    msg.datestring = new Intl.DateTimeFormat(msg.language, { dateStyle: msg.styledate, timeStyle: msg.styletime}).format(dateobject);\nmsg.date = dateobject.getDate(); //\n\nmsg.month = new Intl.DateTimeFormat(msg.language, { month: 'numeric' }).format(dateobject);\nmsg.monthshort = new Intl.DateTimeFormat(msg.language, { month: 'short' }).format(dateobject);\nmsg.monthlong = new Intl.DateTimeFormat(msg.language, { month: 'long' }).format(dateobject);\n\nmsg.year = new Intl.DateTimeFormat(msg.language, { year: 'numeric' }).format(dateobject);\nmsg.year2 = new Intl.DateTimeFormat(msg.language, { year: '2-digit' }).format(dateobject);\n\nmsg.day = dateobject.getDay();\nmsg.dayshort = new Intl.DateTimeFormat(msg.language, { weekday: 'short' }).format(dateobject);\nmsg.daylong = new Intl.DateTimeFormat(msg.language, { weekday: 'long' }).format(dateobject);\n\nmsg.hour24 = new Intl.DateTimeFormat(msg.language, { hour: 'numeric', hour12: false }).format(dateobject);\nmsg.hour24_2 = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: false }).format(dateobject);\nmsg.hour12 = new Intl.DateTimeFormat(msg.language, { hour: 'numeric', hour12: true }).format(dateobject).split(\" \")[0];\nmsg.hour12_2 = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: true }).format(dateobject).split(\" \")[0];\nmsg.hour12prefix = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: true }).format(dateobject).split(\" \")[1];\n\nmsg.minute = dateobject.getMinutes();\nmsg.minute2 = new Intl.DateTimeFormat(msg.language, { minute: '2-digit' }).format(dateobject);\n\nmsg.second = dateobject.getSeconds();\nmsg.second2 = new Intl.DateTimeFormat(msg.language, { second: '2-digit' }).format(dateobject);\n\nmsg.timezone = new Intl.DateTimeFormat('en-US', { timeZoneName: 'short' }).format(dateobject).split(\" \")[1];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3200,
        "wires": [
            [
                "d7a29a9cf67bb626"
            ]
        ]
    },
    {
        "id": "686728d362855652",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "config display date",
        "func": "msg.payload = global.get(\"Time_sunrise\");\nmsg.styledate=\"none\";\nmsg.styletime=\"short\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3200,
        "wires": [
            [
                "772d23200d624e97"
            ]
        ]
    },
    {
        "id": "62bb82a24af74bb9",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "group": "ddb5dd88e80aa0b2",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Sunset Time :",
        "format": "{{msg.datestring}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 3240,
        "wires": []
    },
    {
        "id": "b91fa6f8f35723bf",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "DateTime",
        "func": "// msg.language is the language code in the form xx-YY. \n// Most of the language codes from here should work: http://www.lingoes.net/en/translator/langcode.htm\n// If no msg.language code is selected, then en-US is default.\n//\n// msg.payload contain the date\n// The script will try to parse a human written datetime, like december 1, 2033 11:25 AM GMT+1\n// If this can not be passed correctly, then it will try to read it as a timestamp value instead\n// Timestamps from within Node-Red works perfectly, but timestamps coming from HA might be missing some digits,\n// so you need to add the missing zeros in the end by *10000 or whatever is missing to reach the same number\n// of digits as Node-Red timestamps.\n\n// more info on the date objects used: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n// more info on localization of datetime: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n\n\nif (!msg.language) { msg.language = global.get(\"language\");}\nif (!msg.styledate) { msg.styledate = global.get(\"styledate\"); }\nif (!msg.styletime) { msg.styletime = global.get(\"styletime\"); }\n\nvar input = Date.parse(msg.payload+(global.get(\"Tz\")*1000));\nif (isNaN(input)) { input = msg.payload + (global.get(\"Tz\") * 1000) }\nvar dateobject = new Date(input)\n\nmsg.timevalue = dateobject.valueOf();\nif (msg.styledate == \"none\")\n    msg.datestring = dateobject.toLocaleTimeString(msg.language);\nelse\n    msg.datestring = new Intl.DateTimeFormat(msg.language, { dateStyle: msg.styledate, timeStyle: msg.styletime }).format(dateobject);\nmsg.date = dateobject.getDate(); //\n\nmsg.month = new Intl.DateTimeFormat(msg.language, { month: 'numeric' }).format(dateobject);\nmsg.monthshort = new Intl.DateTimeFormat(msg.language, { month: 'short' }).format(dateobject);\nmsg.monthlong = new Intl.DateTimeFormat(msg.language, { month: 'long' }).format(dateobject);\n\nmsg.year = new Intl.DateTimeFormat(msg.language, { year: 'numeric' }).format(dateobject);\nmsg.year2 = new Intl.DateTimeFormat(msg.language, { year: '2-digit' }).format(dateobject);\n\nmsg.day = dateobject.getDay();\nmsg.dayshort = new Intl.DateTimeFormat(msg.language, { weekday: 'short' }).format(dateobject);\nmsg.daylong = new Intl.DateTimeFormat(msg.language, { weekday: 'long' }).format(dateobject);\n\nmsg.hour24 = new Intl.DateTimeFormat(msg.language, { hour: 'numeric', hour12: false }).format(dateobject);\nmsg.hour24_2 = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: false }).format(dateobject);\nmsg.hour12 = new Intl.DateTimeFormat(msg.language, { hour: 'numeric', hour12: true }).format(dateobject).split(\" \")[0];\nmsg.hour12_2 = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: true }).format(dateobject).split(\" \")[0];\nmsg.hour12prefix = new Intl.DateTimeFormat(msg.language, { hour: '2-digit', hour12: true }).format(dateobject).split(\" \")[1];\n\nmsg.minute = dateobject.getMinutes();\nmsg.minute2 = new Intl.DateTimeFormat(msg.language, { minute: '2-digit' }).format(dateobject);\n\nmsg.second = dateobject.getSeconds();\nmsg.second2 = new Intl.DateTimeFormat(msg.language, { second: '2-digit' }).format(dateobject);\n\nmsg.timezone = new Intl.DateTimeFormat('en-US', { timeZoneName: 'short' }).format(dateobject).split(\" \")[1];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3240,
        "wires": [
            [
                "62bb82a24af74bb9"
            ]
        ]
    },
    {
        "id": "21ad67af1132f07c",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "config display time",
        "func": "msg.payload = global.get(\"Time_sunset\");\nmsg.styledate = \"none\";\nmsg.styletime = \"short\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3240,
        "wires": [
            [
                "b91fa6f8f35723bf"
            ]
        ]
    },
    {
        "id": "6b6118ac34afa254",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "bb8be1a6cf7cfbfa",
        "name": "startup",
        "mode": "link",
        "links": [
            "2e533edcda9fc771",
            "b789391219cdd41d",
            "568edbb528180f3a",
            "3be281ea4ca349a3",
            "3e574b0edbd0ae51"
        ],
        "x": 530,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "b789391219cdd41d",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Startup event",
        "links": [
            "6b6118ac34afa254"
        ],
        "x": 130,
        "y": 3260,
        "wires": [
            [
                "d9e937ee.73a7c8",
                "073f8daeb600fee3"
            ]
        ],
        "l": true
    },
    {
        "id": "f61bd9af8a0f4439",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "start of day",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3120,
        "wires": [
            [
                "d9e937ee.73a7c8"
            ]
        ]
    },
    {
        "id": "babb862c3e28f2ca",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "get state of light 1",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantLight",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 3360,
        "wires": [
            [
                "668332c213a89fc9"
            ]
        ]
    },
    {
        "id": "668332c213a89fc9",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "CurrentStateLight",
        "func": "global.set(\"CurrentStateLight\", parseInt(msg.payload));\nmsg.value = msg.payload;\nmsg.path = \"LightState\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3360,
        "wires": [
            [
                "90d504adde4059f5",
                "d806be4ea05b2683"
            ]
        ]
    },
    {
        "id": "102c966addfe0acd",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "f1413343fb3f339a",
        "name": "Mqtt Set Input",
        "links": [
            "d9a8dfa822d41729",
            "5be93373d82fe5b1",
            "6d8e4e7d057085a3",
            "b985345870ba0b6c"
        ],
        "x": 1230,
        "y": 1020,
        "wires": [
            [
                "05d78a4a8c2afb9d"
            ]
        ],
        "l": true
    },
    {
        "id": "b985345870ba0b6c",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "f1413343fb3f339a",
        "name": "To Mqtt Set",
        "mode": "link",
        "links": [
            "102c966addfe0acd",
            "a4862d1895d984f2"
        ],
        "x": 1650,
        "y": 1080,
        "wires": [],
        "l": true
    },
    {
        "id": "98bed3d7fb13f1ed",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "f1413343fb3f339a",
        "name": "Mqtt set input if act",
        "links": [
            "03ac376c807cd507",
            "5eb97fcb30712d2d",
            "b0f9468591067be9",
            "c75383690a6ce4a9",
            "e6255c3d9775c909",
            "7b829e09487f3922",
            "92ea094d49f4e57e"
        ],
        "x": 1250,
        "y": 1080,
        "wires": [
            [
                "03e5c1af02eadf42"
            ]
        ],
        "l": true
    },
    {
        "id": "5eb97fcb30712d2d",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "To Mqtt Set Activated",
        "mode": "link",
        "links": [
            "98bed3d7fb13f1ed"
        ],
        "x": 1860,
        "y": 1260,
        "wires": [],
        "l": true
    },
    {
        "id": "c512dba2ad836d85",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "activate mqtt request",
        "func": "if ( (msg.payload == 'activate') && (global.get(\"bridgestate\") == \"online\") && (global.get(\"stm32state\") == \"online\") )\n    global.set('StateSendMqtt', 1);\nif (msg.payload=='desactivate')\n    global.set('StateSendMqtt', 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "69e369f13a724cb8",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "activate",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "activate",
        "payloadType": "str",
        "x": 1230,
        "y": 1740,
        "wires": [
            [
                "c512dba2ad836d85"
            ]
        ]
    },
    {
        "id": "2e23522b330cc761",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "desactivate",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "desactivate",
        "payloadType": "str",
        "x": 1250,
        "y": 1780,
        "wires": [
            [
                "c512dba2ad836d85"
            ]
        ]
    },
    {
        "id": "852914795e0de142",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "Event 1 End In",
        "links": [
            "6ffa35c2838f22a0"
        ],
        "x": 1240,
        "y": 1240,
        "wires": [
            [
                "9c6b95a334f0c522"
            ]
        ],
        "l": true
    },
    {
        "id": "6ffa35c2838f22a0",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "Event 1 End out",
        "mode": "link",
        "links": [
            "852914795e0de142"
        ],
        "x": 1420,
        "y": 920,
        "wires": [],
        "l": true
    },
    {
        "id": "97246c25a102a772",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "Event 2 End In",
        "links": [
            "deb8467969e86f21"
        ],
        "x": 1240,
        "y": 1300,
        "wires": [
            [
                "297863b0fe846ce7"
            ]
        ],
        "l": true
    },
    {
        "id": "ec163f1967bdd328",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "Event 3 End In",
        "links": [
            "7ae9dff4ac7aefd9"
        ],
        "x": 1240,
        "y": 1360,
        "wires": [
            [
                "4532022c6d68c9c1",
                "0e65c468f4790b61"
            ]
        ],
        "l": true
    },
    {
        "id": "deb8467969e86f21",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "Event 2 End out",
        "mode": "link",
        "links": [
            "97246c25a102a772"
        ],
        "x": 540,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "7ae9dff4ac7aefd9",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "Event 3 End out",
        "mode": "link",
        "links": [
            "ec163f1967bdd328"
        ],
        "x": 540,
        "y": 1320,
        "wires": [],
        "l": true
    },
    {
        "id": "1b6186beec2ffee1",
        "type": "comment",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "Sequential read of attributes",
        "info": "Master read first every minute\nEvent 1 End In fired by read end of first attributes\nEvent 2 End In Fired by read end of pump 1 attributes\nEvent 3 End In Fired by read end of pump 2 attributes",
        "x": 1880,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e8d75b98c57cea03",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "label": "Light activated below this brightness",
        "tooltip": "",
        "group": "ddb5dd88e80aa0b2",
        "order": 25,
        "width": 12,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "32767",
        "step": "20",
        "className": "",
        "x": 610,
        "y": 3320,
        "wires": [
            [
                "41089e09438e2145"
            ]
        ]
    },
    {
        "id": "e24b521241219287",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Light management",
        "func": "msg.payload=\"\";\nmsg.topic=\"\";\n// verify if mqtt and stm32 board actives\nif (global.get(\"StateSendMqtt\")==1)\n{\n    switch (Number(global.get(\"LightAutomation\")))\n    {\n        // manual\n        case 0:\n            msg.topic = \"Manual mode for light...\";\n            break;\n        // Light On if Luminosity to low\n        case 1: \n            if (global.get(\"LightLimit\") > global.get(\"Luminosity\")) {\n                msg.topic = \"Light On because Brightness is low...\";\n                global.set(\"DesiredStateLight\",1);\n            }\n            else \n            {\n                msg.topic = \"Light Off because Brightness is hight...\";                        \n                global.set(\"DesiredStateLight\", 0);\n            }\n            break;\n        // use sheduler for light on            \n        case 2:\n            if (global.get(\"StateLightSheduler\") == 1) {\n                msg.topic = \"Light On by sheduler...\";                        \n                global.set(\"DesiredStateLight\", 1);\n            }\n            else {\n                msg.topic = \"Light Off by sheduler...\";                          \n                global.set(\"DesiredStateLight\", 0);\n            }  \n            break;   \n        // use sheduler and level        \n        case 3:\n            if (global.get(\"StateLightSheduler\") == 1) {\n                if (global.get(\"LightLimit\") > global.get(\"Luminosity\")) {\n                    msg.topic = \"Light On by sheduler and Brightness is low...\";                            \n                    global.set(\"DesiredStateLight\", 1);\n                }\n                else {\n                     msg.topic = \"Light Off by sheduler and Brightness is hight...\";                             \n                    global.set(\"DesiredStateLight\", 0);\n                }\n            }\n            else {\n                if (global.get(\"DesiredStateLight\") != 0) {\n                    msg.topic = \"Light Off by sheduler...\";                        \n                    msg.payload = 0;\n                }\n            }\n            break;\n        // Light On if Luminosity to low and it's day\n        case 4:\n            if (global.get(\"DayOrNight\") == \"Day\")\n            {\n                if (global.get(\"LightLimit\") > global.get(\"Luminosity\")) {\n                    msg.topic = \"Light On because Brightness is low and it's Day...\";\n                    global.set(\"DesiredStateLight\", 1);\n                }\n                else {\n                    msg.topic = \"Light Off because Brightness is hight... and it's Day\";\n                    global.set(\"DesiredStateLight\", 0);\n                }\n            }\n            else\n            {\n                msg.topic = \"Light Off because it's Night\";\n                global.set(\"DesiredStateLight\", 0);\n            }           \n            break;            \n        default:\n        msg.topic = \"??\";\n            msg.info=global.get(\"LightAutomation\"); \n            break;\n                        \n    }\n}\nelse\n{\n    msg.topic = \"Zigbee2mqtt or stm32 not active...\";\n}\nmsg.payload = global.get(\"DesiredStateLight\");\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3500,
        "wires": [
            [
                "5ce7e4a241bf1e50",
                "ccccd2d98a50cfe3"
            ]
        ]
    },
    {
        "id": "073f8daeb600fee3",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Initialization",
        "func": "msg.payload = global.get(\"LightLimit\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3320,
        "wires": [
            [
                "e8d75b98c57cea03"
            ]
        ]
    },
    {
        "id": "35ec38a5ffd362e8",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "bb8be1a6cf7cfbfa",
        "name": "shedule 4s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "activate",
        "payloadType": "str",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "cd57fa15479fbee7"
            ]
        ]
    },
    {
        "id": "cd57fa15479fbee7",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "bb8be1a6cf7cfbfa",
        "name": "Shedule event",
        "mode": "link",
        "links": [
            "5ef682a3dd9f0e05",
            "75b439fd08569557",
            "8078d564b0fdd706",
            "ea00f5fafebc2060",
            "65af84706713cebe",
            "3035cf869b6de84c"
        ],
        "x": 360,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "ea00f5fafebc2060",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "453c262dca4aaeb8",
        "name": "shedule 4s Activate",
        "links": [
            "cd57fa15479fbee7"
        ],
        "x": 1250,
        "y": 1700,
        "wires": [
            [
                "c512dba2ad836d85"
            ]
        ],
        "l": true
    },
    {
        "id": "75b439fd08569557",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "shedule 4s Activate",
        "links": [
            "cd57fa15479fbee7"
        ],
        "x": 150,
        "y": 3500,
        "wires": [
            [
                "e24b521241219287"
            ]
        ],
        "l": true
    },
    {
        "id": "41089e09438e2145",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "LightLimit",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 3320,
        "wires": [
            [
                "e24b521241219287",
                "f63ce23337217ff5"
            ]
        ]
    },
    {
        "id": "153db24b51094cba",
        "type": "ui_dropdown",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "label": "Automation Mode for Light :",
        "tooltip": "",
        "place": "Select option for Light Automation",
        "group": "ddb5dd88e80aa0b2",
        "order": 18,
        "width": 15,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "No automation - Manual",
                "value": "0",
                "type": "str"
            },
            {
                "label": "Light if luminosity level too low",
                "value": "1",
                "type": "str"
            },
            {
                "label": "Scheduler",
                "value": "2",
                "type": "str"
            },
            {
                "label": "Scheduler and if luminosity too low",
                "value": "3",
                "type": "str"
            },
            {
                "label": "Day and if luminosity too low",
                "value": "4",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 660,
        "y": 3440,
        "wires": [
            [
                "f63ce23337217ff5",
                "17daee5d9bbda980"
            ]
        ]
    },
    {
        "id": "b13ba425e027ad45",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "activate mqtt",
        "func": "if ((global.get(\"bridgewstate\") == 1) && (global.get(\"stm32state\")==1) )\n    global.set('StateSendMqtt', 1);\nelse\n    global.set('StateSendMqtt', 1);\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1400,
        "wires": []
    },
    {
        "id": "5ef682a3dd9f0e05",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "shedule 4s Activate",
        "links": [
            "cd57fa15479fbee7"
        ],
        "x": 1610,
        "y": 1400,
        "wires": [
            [
                "b13ba425e027ad45"
            ]
        ],
        "l": true
    },
    {
        "id": "2e533edcda9fc771",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Startup event",
        "links": [
            "6b6118ac34afa254"
        ],
        "x": 130,
        "y": 3440,
        "wires": [
            [
                "e6408f8a46cc53bc"
            ]
        ],
        "l": true
    },
    {
        "id": "e6408f8a46cc53bc",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "get LightAutomation",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "LightAutomation",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 3440,
        "wires": [
            [
                "153db24b51094cba"
            ]
        ]
    },
    {
        "id": "bcdc8bcb3e1d2a02",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "group": "ddb5dd88e80aa0b2",
        "order": 21,
        "width": 12,
        "height": 1,
        "name": "View state of light automation",
        "label": "Light Statut :",
        "format": "{{msg.topic}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 3560,
        "wires": []
    },
    {
        "id": "0c85f04082f43225",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "start read Attribute PlantLight",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"read\":{\"attributes\":[\"PlantLight\",\"TankLevel\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 1440,
        "wires": [
            [
                "5eb97fcb30712d2d"
            ]
        ]
    },
    {
        "id": "0e65c468f4790b61",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 1440,
        "wires": [
            [
                "0c85f04082f43225"
            ]
        ]
    },
    {
        "id": "25544d4d16e753b3",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "dbd2a1ce0a315409",
        "name": "Read Light",
        "links": [
            "170a8d3af3b63249",
            "f63ce23337217ff5"
        ],
        "x": 1240,
        "y": 1440,
        "wires": [
            [
                "0e65c468f4790b61"
            ]
        ],
        "l": true
    },
    {
        "id": "5ce7e4a241bf1e50",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "fix display",
        "func": "if (msg.topic!=\"\")\n    return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3560,
        "wires": [
            [
                "bcdc8bcb3e1d2a02"
            ]
        ]
    },
    {
        "id": "f63ce23337217ff5",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "read attribute light",
        "mode": "link",
        "links": [
            "25544d4d16e753b3"
        ],
        "x": 1150,
        "y": 3380,
        "wires": [],
        "l": true
    },
    {
        "id": "c75383690a6ce4a9",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "To Mqtt Set",
        "mode": "link",
        "links": [
            "98bed3d7fb13f1ed"
        ],
        "x": 770,
        "y": 3360,
        "wires": [],
        "l": true
    },
    {
        "id": "90d504adde4059f5",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Set PlantLight attribute",
        "func": "if (global.get(\"CurrentStateLight\") != global.get(\"DesiredStateLight\"))\n{\n    msg.payload = '{\"write\":{\"cluster\":\"msTemperatureMeasurement\",\"options\":{},\"payload\":{\"PlantLight\":' + global.get(\"DesiredStateLight\") +'}}}';\n    return [msg,];\n}\nelse\n    return [,];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3360,
        "wires": [
            [
                "c75383690a6ce4a9"
            ],
            []
        ]
    },
    {
        "id": "a6e74581130e411a",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "update DesiredStateLight",
        "func": "global.set(\"DesiredStateLight\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "3a9ca77eeeed2d74",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Load Scheduler",
        "func": "if (typeof global.get(\"Sheduler\") !== 'undefined')\n    msg.payload = global.get(\"Sheduler\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 3620,
        "wires": [
            [
                "dec834a4.768678"
            ]
        ]
    },
    {
        "id": "dec834a4.768678",
        "type": "ui_time_scheduler",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "group": "ddb5dd88e80aa0b2",
        "name": "",
        "startDay": "0",
        "refresh": 60,
        "devices": [
            "Schedule for Light"
        ],
        "singleOff": false,
        "onlySendChange": false,
        "customPayload": false,
        "eventMode": false,
        "eventOptions": [],
        "sendTopic": false,
        "lat": "",
        "lon": "",
        "customContextStore": "",
        "outputs": 2,
        "order": 27,
        "width": 11,
        "height": 3,
        "x": 350,
        "y": 3620,
        "wires": [
            [
                "0fbc687b432c3d27"
            ],
            [
                "6819faa7e05fb6f4"
            ]
        ]
    },
    {
        "id": "0fbc687b432c3d27",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Save Scheduler",
        "func": "global.set(\"Sheduler\",msg.payload);\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3620,
        "wires": []
    },
    {
        "id": "6819faa7e05fb6f4",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "Set StateLightSheduler",
        "func": "if (msg.payload)\n    global.set(\"StateLightSheduler\", 1);\nelse\n    global.set(\"StateLightSheduler\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "ccccd2d98a50cfe3",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "enable disable button",
        "func": "msg.enabled = false;\nswitch (global.get(\"LightAutomation\")) {\n    case 0 : msg.enabled = true;\n    break;\n    default : msg.enebled = true;\n    break;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3500,
        "wires": [
            [
                "63f773f9e000f8bd"
            ]
        ]
    },
    {
        "id": "568edbb528180f3a",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "Startup event",
        "links": [
            "6b6118ac34afa254"
        ],
        "x": 130,
        "y": 580,
        "wires": [
            [
                "cd363204a59da49b",
                "766ff62c40a59916",
                "77c61c0340759a7f",
                "705860dab3aecf1c",
                "2a3ec1eafe66a15e"
            ]
        ],
        "l": true
    },
    {
        "id": "cd363204a59da49b",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "get TimePump1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TimePump1",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 580,
        "wires": [
            [
                "bdeb104ea2ce0591"
            ]
        ]
    },
    {
        "id": "bdeb104ea2ce0591",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "",
        "label": "Fix Time for Pump in ms",
        "tooltip": "",
        "group": "c4df573d69f7bde3",
        "order": 7,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "10000",
        "step": "500",
        "className": "",
        "x": 610,
        "y": 580,
        "wires": [
            [
                "9d4daf3882ad31b5"
            ]
        ]
    },
    {
        "id": "9d4daf3882ad31b5",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "set TimePump1",
        "func": "global.set(\"TimePump1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "84ec234159cbb0fc",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "Fix interval between 2 Pump actions",
        "label": "Fix Interval between pump actions in Min.",
        "tooltip": "",
        "group": "c4df573d69f7bde3",
        "order": 9,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "1",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "189294e5ae22d0d1"
            ]
        ]
    },
    {
        "id": "766ff62c40a59916",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "get DelayTimePump1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DelayTimePump1",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 640,
        "wires": [
            [
                "84ec234159cbb0fc"
            ]
        ]
    },
    {
        "id": "189294e5ae22d0d1",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "set DelayTimePump1",
        "func": "global.set(\"DelayTimePump1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7b41c08da83d9740",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "",
        "label": "Soil Humidity below watering act",
        "tooltip": "",
        "group": "c4df573d69f7bde3",
        "order": 11,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "99",
        "step": "5",
        "className": "",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "bc12c1db657e8b65"
            ]
        ]
    },
    {
        "id": "77c61c0340759a7f",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "get BelowSoilMoisture1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "BelowSoilMoisture1",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 700,
        "wires": [
            [
                "7b41c08da83d9740"
            ]
        ]
    },
    {
        "id": "bc12c1db657e8b65",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "set BelowSoilMoisture1",
        "func": "global.set(\"BelowSoilMoisture1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "6de2a395b9302ae3",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "",
        "label": "Max Watering Cycle before Alarm",
        "tooltip": "",
        "group": "c4df573d69f7bde3",
        "order": 13,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "x": 640,
        "y": 760,
        "wires": [
            [
                "cfc105fce5379d0b"
            ]
        ]
    },
    {
        "id": "705860dab3aecf1c",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "get MaxWateringCycle1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MaxWateringCycle1",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 760,
        "wires": [
            [
                "6de2a395b9302ae3"
            ]
        ]
    },
    {
        "id": "cfc105fce5379d0b",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "set MaxWateringCycle1",
        "func": "global.set(\"MaxWateringCycle1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "b4a2d05bcab747d6",
        "type": "ui_dropdown",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "",
        "label": "Activate survey :",
        "tooltip": "",
        "place": "Select option",
        "group": "c4df573d69f7bde3",
        "order": 15,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "No survey",
                "value": "0",
                "type": "str"
            },
            {
                "label": "Activate survey",
                "value": "1",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 580,
        "y": 820,
        "wires": [
            [
                "ca27bd442bbb8376"
            ]
        ]
    },
    {
        "id": "2a3ec1eafe66a15e",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "get ActivateSurvey1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ActivateSurvey1",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 820,
        "wires": [
            [
                "b4a2d05bcab747d6"
            ]
        ]
    },
    {
        "id": "ca27bd442bbb8376",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "set ActivateSurvey1",
        "func": "global.set(\"ActivateSurvey1\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "82af76181ea9f33d",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "group": "c4df573d69f7bde3",
        "order": 17,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Current State of Survey :",
        "format": "{{msg.topic}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 880,
        "wires": []
    },
    {
        "id": "8078d564b0fdd706",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "shedule 4s Activate",
        "links": [
            "cd57fa15479fbee7"
        ],
        "x": 150,
        "y": 880,
        "wires": [
            [
                "4fac997e48d9bf8a"
            ]
        ],
        "l": true
    },
    {
        "id": "4fac997e48d9bf8a",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "Automation survey Pump 1",
        "func": "msg.payload=\"\";\nmsg.topic=\"\";\nmsg.delay=0;\nmsg.wa=\"\";\n// verify if mqtt and stm32 board actives\nif (global.get(\"StateSendMqtt\")==1)\n{\n    switch(global.get(\"ActivateSurvey1\"))\n    {\n        // no survey\n        case 0:\n            global.set(\"SurveyStep1\",0);\n            global.set(\"CycleCount1\",0);\n            msg.CycleCount = global.get(\"CycleCount1\");            \n            msg.topic = \"No survey activity...\";\n            break;\n        // Automation of survey\n        case 1: \n            if ( (global.get(\"TankLevel\")==0) || (global.get(\"MaxWateringCycle1\")==global.get(\"CycleCount1\")) )\n            {   \n                msg.topic = \"Warning : Water tank level to Low !\";\n                if (global.get(\"MaxWateringCycle1\") == global.get(\"CycleCount1\"))\n                    msg.topic = \"Warning : Watering stopped because Too many cycle !\";\n            }\n            else\n            {\n                switch(global.get(\"SurveyStep1\"))\n                {\n                    // compare soil moisture and pass to step 1\n                    case 0:\n                        if (global.get(\"SoilMoisture1\") < global.get(\"BelowSoilMoisture1\"))\n                        {\n                            // mqtt msg for setting action time of pump 1\n                            msg.wa = { \n                                \"write\": \n                                { \n                                    \"cluster\": \"msTemperatureMeasurement\",\n                                    \"options\": {},\n                                    \"payload\": {\n                                        \"PlantWaterAlimentation1\": global.get(\"TimePump1\") \n                                    } \n                                } \n                            };\n                            global.set(\"SurveyStep1\",1);\n                            msg.topic = \"Start pump...\";\n                        }\n                        else\n                        {\n                            global.set(\"CycleCount1\",0);                            \n                            msg.topic = \"Survey Soil Moisture...\";\n                        }\n                    break;\n                    // wait for pump to 0 ms\n                    case 1:              \n                        if (global.get(\"WaterAlimentation1\")==0)\n                        {\n                            global.set(\"SurveyStep1\",2);\n                            msg.topic = \"Start Delay for next Watering...\";\n                            msg.delay = global.get(\"DelayTimePump1\")*60;\n                            global.set(\"DelayOfCycle1\",0);\n                        }\n                        else\n                        {                    \n                            msg.topic = \"Pump Running...\";\n                        }\n                    break;\n                    // wait for delay between watering act and return to 0\n                    // increment step and alarm if problem\n                        \n                    case 2:  \n                        if (global.get(\"DelayOfCycle1\")==1)\n                        {\n                            global.set(\"SurveyStep1\", 0);\n                            global.set(\"CycleCount1\", global.get(\"CycleCount1\")+1);\n                            msg.topic = \"Survey Soil Moisture...\";                        \n                        }\n                        else\n                            msg.topic = \"Start Delay for next Watering...\";                 \n                    break;\n                }    \n            }\n            break;          \n        default:\n            break;\n                        \n    }\n}\nelse\n{\n    msg.topic = \"Wait for Zigbee2mqtt or stm32 activity...\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 880,
        "wires": [
            [
                "82af76181ea9f33d",
                "e4d0bb47f3737cd2",
                "987838aa9f90f88b"
            ]
        ]
    },
    {
        "id": "d8237bbaf6cbd806",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "read attribut pump 1",
        "func": "var msg = {payload: {\"read\":{\"attributes\":[\"PlantWaterAlimentation1\",\"PlantWaterAlimentationState1\",\"TankLevel\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1020,
        "wires": [
            [
                "e6255c3d9775c909"
            ]
        ]
    },
    {
        "id": "e6255c3d9775c909",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "To Mqtt Set Activated",
        "mode": "link",
        "links": [
            "98bed3d7fb13f1ed"
        ],
        "x": 940,
        "y": 1020,
        "wires": [],
        "l": true
    },
    {
        "id": "d380ba959977eef3",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "Delay of cycle",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1060,
        "wires": [
            [
                "a572d78b95a88f4c"
            ]
        ]
    },
    {
        "id": "a572d78b95a88f4c",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "DelayOfCycle1",
                "pt": "global",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e4d0bb47f3737cd2",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "actions to realize",
        "func": "if (msg.wa!=\"\")\n{\n    msg.payload = msg.wa;\n    return [msg,];\n}\nif (msg.delay!=0)\n{\n    return [,msg];\n}\n\nreturn [,];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 940,
        "wires": [
            [
                "e6255c3d9775c909"
            ],
            [
                "d380ba959977eef3"
            ]
        ]
    },
    {
        "id": "f46bbdc4afd81787",
        "type": "switch",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "read pump if SurveyStep 1",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 1020,
        "wires": [
            [
                "d8237bbaf6cbd806"
            ]
        ]
    },
    {
        "id": "02a31a80fc148bef",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SurveyStep1",
        "payloadType": "global",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "f46bbdc4afd81787"
            ]
        ]
    },
    {
        "id": "43bd21d7149e1cfa",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "62a636a5e6353ed5",
        "name": "get tank level",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/TankLevel",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1230,
        "y": 1920,
        "wires": [
            [
                "1943b98af857213a"
            ]
        ]
    },
    {
        "id": "8b6cd716d6d0da20",
        "type": "ui_gauge",
        "z": "b9d6d847700528fd",
        "g": "62a636a5e6353ed5",
        "name": "Tank Level",
        "group": "ddb5dd88e80aa0b2",
        "order": 11,
        "width": 6,
        "height": 3,
        "gtype": "wave",
        "title": "Tank Level",
        "label": "",
        "format": "{{value}}",
        "min": "0",
        "max": "1",
        "colors": [
            "#b30000",
            "#e6e600",
            "#49a300"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1650,
        "y": 1920,
        "wires": []
    },
    {
        "id": "1943b98af857213a",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "62a636a5e6353ed5",
        "name": "to numeric",
        "func": "if (Number(msg.payload) == 1)\n    msg.payload = 0;\nelse\n    msg.payload = 1;\nglobal.set(\"TankLevel\",msg.payload);\nmsg.value = msg.payload;\nmsg.path = \"TankLevel\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1920,
        "wires": [
            [
                "8b6cd716d6d0da20",
                "ee6f7815f5c8abc5"
            ]
        ]
    },
    {
        "id": "a336b63211a4f133",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "group": "c4df573d69f7bde3",
        "order": 19,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Cycle number :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 940,
        "wires": []
    },
    {
        "id": "987838aa9f90f88b",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "a6dc8ec5ad099329",
        "name": "read CycleCount",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CycleCount1",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 940,
        "wires": [
            [
                "a336b63211a4f133"
            ]
        ]
    },
    {
        "id": "3be281ea4ca349a3",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "Startup event",
        "links": [
            "6b6118ac34afa254"
        ],
        "x": 130,
        "y": 1560,
        "wires": [
            [
                "fda63879b365524d",
                "62cacb1328188307",
                "96aa9cf3c5fb1747",
                "68f05db888d9328a",
                "0c399c2e4a564074"
            ]
        ],
        "l": true
    },
    {
        "id": "fda63879b365524d",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "get TimePump2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TimePump2",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1560,
        "wires": [
            [
                "726cfad408f82cad"
            ]
        ]
    },
    {
        "id": "726cfad408f82cad",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "",
        "label": "Fix Time for Pump in ms",
        "tooltip": "",
        "group": "d5e9d849d4e0de52",
        "order": 7,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "10000",
        "step": "500",
        "className": "",
        "x": 610,
        "y": 1560,
        "wires": [
            [
                "476215577a4ffb2b"
            ]
        ]
    },
    {
        "id": "476215577a4ffb2b",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "set TimePump2",
        "func": "global.set(\"TimePump2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "b16314c4c6b25273",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "Fix interval between 2 Pump actions",
        "label": "Fix Interval between pump actions in Min.",
        "tooltip": "",
        "group": "d5e9d849d4e0de52",
        "order": 9,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "1",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 650,
        "y": 1620,
        "wires": [
            [
                "05046324b5608ae8"
            ]
        ]
    },
    {
        "id": "62cacb1328188307",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "get DelayTimePump2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DelayTimePump2",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1620,
        "wires": [
            [
                "b16314c4c6b25273"
            ]
        ]
    },
    {
        "id": "05046324b5608ae8",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "set DelayTimePump2",
        "func": "global.set(\"DelayTimePump2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "7d01a696bf41b849",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "",
        "label": "Soil Humidity below watering act",
        "tooltip": "",
        "group": "d5e9d849d4e0de52",
        "order": 11,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "99",
        "step": "5",
        "className": "",
        "x": 630,
        "y": 1680,
        "wires": [
            [
                "17133beb3f5e3ac2"
            ]
        ]
    },
    {
        "id": "96aa9cf3c5fb1747",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "get BelowSoilMoisture2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "BelowSoilMoisture2",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1680,
        "wires": [
            [
                "7d01a696bf41b849"
            ]
        ]
    },
    {
        "id": "17133beb3f5e3ac2",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "set BelowSoilMoisture2",
        "func": "global.set(\"BelowSoilMoisture2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "8d46527049982b12",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "",
        "label": "Max Watering Cycle before Alarm",
        "tooltip": "",
        "group": "d5e9d849d4e0de52",
        "order": 13,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "x": 640,
        "y": 1740,
        "wires": [
            [
                "d320bd174f160cb2"
            ]
        ]
    },
    {
        "id": "68f05db888d9328a",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "get MaxWateringCycle2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MaxWateringCycle2",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1740,
        "wires": [
            [
                "8d46527049982b12"
            ]
        ]
    },
    {
        "id": "d320bd174f160cb2",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "set MaxWateringCycle2",
        "func": "global.set(\"MaxWateringCycle2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "89e3e2d3482a3027",
        "type": "ui_dropdown",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "",
        "label": "Activate survey :",
        "tooltip": "",
        "place": "Select option",
        "group": "d5e9d849d4e0de52",
        "order": 15,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "No survey",
                "value": "0",
                "type": "str"
            },
            {
                "label": "Activate survey",
                "value": "1",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 580,
        "y": 1800,
        "wires": [
            [
                "938c6c81a62669d0"
            ]
        ]
    },
    {
        "id": "0c399c2e4a564074",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "get ActivateSurvey2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ActivateSurvey2",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1800,
        "wires": [
            [
                "89e3e2d3482a3027"
            ]
        ]
    },
    {
        "id": "938c6c81a62669d0",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "set ActivateSurvey2",
        "func": "global.set(\"ActivateSurvey2\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "84eb70c9ae22ba61",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "group": "d5e9d849d4e0de52",
        "order": 17,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Current State of Survey :",
        "format": "{{msg.topic}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 1860,
        "wires": []
    },
    {
        "id": "65af84706713cebe",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "shedule 4s Activate",
        "links": [
            "cd57fa15479fbee7"
        ],
        "x": 150,
        "y": 1860,
        "wires": [
            [
                "3d3a1e235f8940d4"
            ]
        ],
        "l": true
    },
    {
        "id": "3d3a1e235f8940d4",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "Automation survey Pump 2",
        "func": "msg.payload=\"\";\nmsg.topic=\"\";\nmsg.delay=0;\nmsg.wa=\"\";\n// verify if mqtt and stm32 board actives\nif (global.get(\"StateSendMqtt\")==1)\n{\n    switch(global.get(\"ActivateSurvey2\"))\n    {\n        // no survey\n        case 0:\n            global.set(\"SurveyStep2\",0);\n            global.set(\"CycleCount2\",0);\n            msg.CycleCount = global.get(\"CycleCount2\");            \n            msg.topic = \"No survey activity...\";\n            break;\n        // Automation of survey\n        case 1: \n            if ( (global.get(\"TankLevel\")==1) || (global.get(\"MaxWateringCycle2\")==global.get(\"CycleCount2\")) )\n            {   \n                msg.topic = \"Warning : Water tank level to Low !\";\n                if (global.get(\"MaxWateringCycle2\") == global.get(\"CycleCount2\"))\n                    msg.topic = \"Warning : Watering stopped because Too many cycle !\";\n            }\n            else\n            {\n                switch(global.get(\"SurveyStep2\"))\n                {\n                    // compare soil moisture and pass to step 1\n                    case 0:\n                        if (global.get(\"SoilMoisture2\") < global.get(\"BelowSoilMoisture2\"))\n                        {\n                            // mqtt msg for setting action time of pump 1\n                            msg.wa = { \n                                \"write\": \n                                { \n                                    \"cluster\": \"msTemperatureMeasurement\",\n                                    \"options\": {},\n                                    \"payload\": {\n                                        \"PlantWaterAlimentation2\": global.get(\"TimePump2\") \n                                    } \n                                } \n                            };\n                            global.set(\"SurveyStep2\",1);\n                            msg.topic = \"Start pump...\";\n                        }\n                        else\n                        {\n                            msg.topic = \"Survey Soil Moisture...\";\n                            global.set(\"CycleCount2\",0);\n                        }\n                    break;\n                    // wait for pump to 0 ms\n                    case 1:              \n                        if (global.get(\"WaterAlimentation2\")==0)\n                        {\n                            global.set(\"SurveyStep2\",2);\n                            msg.topic = \"Start Delay for next Watering...\";\n                            msg.delay = global.get(\"DelayTimePump2\")*60;\n                            global.set(\"DelayOfCycle2\",0);\n                        }\n                        else\n                        {                    \n                            msg.topic = \"Pump Running...\";\n                        }\n                    break;\n                    // wait for delay between watering act and return to 0\n                    // increment step and alarm if problem\n                        \n                    case 2:  \n                        if (global.get(\"DelayOfCycle2\")==1)\n                        {\n                            global.set(\"SurveyStep2\", 0);\n                            global.set(\"CycleCount2\", global.get(\"CycleCount2\")+1);\n                            msg.topic = \"Survey Soil Moisture...\";                        \n                        }\n                        else\n                            msg.topic = \"Start Delay for next Watering...\";                 \n                    break;\n                }    \n            }\n            break;          \n        default:\n            break;\n                        \n    }\n}\nelse\n{\n    msg.topic = \"Wait for Zigbee2mqtt or stm32 activity...\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1860,
        "wires": [
            [
                "84eb70c9ae22ba61",
                "6d231714ea41112c",
                "44125a72aa4a8382"
            ]
        ]
    },
    {
        "id": "1d0f94b709e213da",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "read attribut pump 1",
        "func": "var msg = {payload: {\"read\":{\"attributes\":[\"PlantWaterAlimentation2\",\"PlantWaterAlimentationState2\",\"TankLevel\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2000,
        "wires": [
            [
                "7b829e09487f3922"
            ]
        ]
    },
    {
        "id": "7b829e09487f3922",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "To Mqtt Set Activated",
        "mode": "link",
        "links": [
            "98bed3d7fb13f1ed"
        ],
        "x": 940,
        "y": 2000,
        "wires": [],
        "l": true
    },
    {
        "id": "d48e95de5f353e24",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "Delay of cycle",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 2040,
        "wires": [
            [
                "adb62dc519356486"
            ]
        ]
    },
    {
        "id": "adb62dc519356486",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "DelayOfCycle2",
                "pt": "global",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "6d231714ea41112c",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "actions to realize",
        "func": "if (msg.wa!=\"\")\n{\n    msg.payload = msg.wa;\n    return [msg,];\n}\nif (msg.delay!=0)\n{\n    return [,msg];\n}\n\nreturn [,];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1920,
        "wires": [
            [
                "7b829e09487f3922"
            ],
            [
                "d48e95de5f353e24"
            ]
        ]
    },
    {
        "id": "088983cee4c9cc9b",
        "type": "switch",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "read pump if SurveyStep 2",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 2000,
        "wires": [
            [
                "1d0f94b709e213da"
            ]
        ]
    },
    {
        "id": "eb12691ed8af76e6",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SurveyStep2",
        "payloadType": "global",
        "x": 180,
        "y": 2000,
        "wires": [
            [
                "088983cee4c9cc9b"
            ]
        ]
    },
    {
        "id": "fd7b4895fcdfc836",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "group": "d5e9d849d4e0de52",
        "order": 19,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Cycle number :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 1920,
        "wires": []
    },
    {
        "id": "44125a72aa4a8382",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "e3b5c1b361b818ad",
        "name": "read CycleCount",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CycleCount2",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1920,
        "wires": [
            [
                "fd7b4895fcdfc836"
            ]
        ]
    },
    {
        "id": "3e574b0edbd0ae51",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "Startup event",
        "links": [
            "6b6118ac34afa254"
        ],
        "x": 130,
        "y": 2520,
        "wires": [
            [
                "b04695849fcac90c",
                "f56b17d08d2de90e",
                "ba5ddc6340427dfc",
                "53e3e14cc47059d8",
                "76d415903ba70a9c"
            ]
        ],
        "l": true
    },
    {
        "id": "b04695849fcac90c",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "get TimePump3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TimePump3",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 2520,
        "wires": [
            [
                "407ceb33ae883c85"
            ]
        ]
    },
    {
        "id": "407ceb33ae883c85",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "",
        "label": "Fix Time for Pump in ms",
        "tooltip": "",
        "group": "c5957db6516f003b",
        "order": 7,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "10000",
        "step": "500",
        "className": "",
        "x": 610,
        "y": 2520,
        "wires": [
            [
                "bb794d21f8c9991f"
            ]
        ]
    },
    {
        "id": "bb794d21f8c9991f",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "set TimePump3",
        "func": "global.set(\"TimePump3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "b74df8dc1372db21",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "Fix interval between 2 Pump actions",
        "label": "Fix Interval between pump actions in Min.",
        "tooltip": "",
        "group": "c5957db6516f003b",
        "order": 9,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "1",
        "max": "60",
        "step": "1",
        "className": "",
        "x": 650,
        "y": 2580,
        "wires": [
            [
                "177aba37e226f5c5"
            ]
        ]
    },
    {
        "id": "f56b17d08d2de90e",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "get DelayTimePump3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DelayTimePump3",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 2580,
        "wires": [
            [
                "b74df8dc1372db21"
            ]
        ]
    },
    {
        "id": "177aba37e226f5c5",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "set DelayTimePump3",
        "func": "global.set(\"DelayTimePump3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "64de457dfb3c6718",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "",
        "label": "Soil Humidity below watering act",
        "tooltip": "",
        "group": "c5957db6516f003b",
        "order": 11,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "99",
        "step": "5",
        "className": "",
        "x": 630,
        "y": 2640,
        "wires": [
            [
                "0176336954862fa2"
            ]
        ]
    },
    {
        "id": "ba5ddc6340427dfc",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "get BelowSoilMoisture3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "BelowSoilMoisture3",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 2640,
        "wires": [
            [
                "64de457dfb3c6718"
            ]
        ]
    },
    {
        "id": "0176336954862fa2",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "set BelowSoilMoisture3",
        "func": "global.set(\"BelowSoilMoisture3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "a74c69fdf4922f51",
        "type": "ui_slider",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "",
        "label": "Max Watering Cycle before Alarm",
        "tooltip": "",
        "group": "c5957db6516f003b",
        "order": 13,
        "width": 7,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "x": 640,
        "y": 2700,
        "wires": [
            [
                "e32e5cfd32743026"
            ]
        ]
    },
    {
        "id": "53e3e14cc47059d8",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "get MaxWateringCycle3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MaxWateringCycle3",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 2700,
        "wires": [
            [
                "a74c69fdf4922f51"
            ]
        ]
    },
    {
        "id": "e32e5cfd32743026",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "set MaxWateringCycle3",
        "func": "global.set(\"MaxWateringCycle3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "d6993d1f3ddb2301",
        "type": "ui_dropdown",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "",
        "label": "Activate survey :",
        "tooltip": "",
        "place": "Select option",
        "group": "c5957db6516f003b",
        "order": 15,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "No survey",
                "value": "0",
                "type": "str"
            },
            {
                "label": "Activate survey",
                "value": "1",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 580,
        "y": 2760,
        "wires": [
            [
                "e5cc1782948c0fd4"
            ]
        ]
    },
    {
        "id": "76d415903ba70a9c",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "get ActivateSurvey3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ActivateSurvey3",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 2760,
        "wires": [
            [
                "d6993d1f3ddb2301"
            ]
        ]
    },
    {
        "id": "e5cc1782948c0fd4",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "set ActivateSurvey3",
        "func": "global.set(\"ActivateSurvey3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "96f65a1781c36dc8",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "group": "c5957db6516f003b",
        "order": 17,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Current State of Survey :",
        "format": "{{msg.topic}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 2820,
        "wires": []
    },
    {
        "id": "3035cf869b6de84c",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "shedule 4s Activate",
        "links": [
            "cd57fa15479fbee7"
        ],
        "x": 150,
        "y": 2820,
        "wires": [
            [
                "02a711b19802443d"
            ]
        ],
        "l": true
    },
    {
        "id": "02a711b19802443d",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "Automation survey Pump 3",
        "func": "msg.payload=\"\";\nmsg.topic=\"\";\nmsg.delay=0;\nmsg.wa=\"\";\n// verify if mqtt and stm32 board actives\nif (global.get(\"StateSendMqtt\")==1)\n{\n    switch(global.get(\"ActivateSurvey3\"))\n    {\n        // no survey\n        case 0:\n            global.set(\"SurveyStep3\",0);\n            global.set(\"CycleCount3\",0);\n            msg.CycleCount = global.get(\"CycleCount3\");            \n            msg.topic = \"No survey activity...\";\n            break;\n        // Automation of survey\n        case 1: \n            if ( (global.get(\"TankLevel\")==1) || (global.get(\"MaxWateringCycle3\")==global.get(\"CycleCount3\")) )\n            {   \n                msg.topic = \"Warning : Water tank level to Low !\";\n                if (global.get(\"MaxWateringCycle3\") == global.get(\"CycleCount3\"))\n                    msg.topic = \"Warning : Watering stopped because Too many cycle !\";\n            }\n            else\n            {\n                switch(global.get(\"SurveyStep3\"))\n                {\n                    // compare soil moisture and pass to step 1\n                    case 0:\n                        if (global.get(\"SoilMoisture3\") < global.get(\"BelowSoilMoisture3\"))\n                        {\n                            // mqtt msg for setting action time of pump 1\n                            msg.wa = { \n                                \"write\": \n                                { \n                                    \"cluster\": \"msTemperatureMeasurement\",\n                                    \"options\": {},\n                                    \"payload\": {\n                                        \"PlantWaterAlimentation3\": global.get(\"TimePump3\") \n                                    } \n                                } \n                            };\n                            global.set(\"SurveyStep3\",1);\n                            msg.topic = \"Start pump...\";\n                        }\n                        else\n                        {\n                            msg.topic = \"Survey Soil Moisture...\";\n                            global.set(\"CycleCount3\",0);\n                        }\n                    break;\n                    // wait for pump to 0 ms\n                    case 1:              \n                        if (global.get(\"WaterAlimentation3\")==0)\n                        {\n                            global.set(\"SurveyStep3\",2);\n                            msg.topic = \"Start Delay for next Watering...\";\n                            msg.delay = global.get(\"DelayTimePump3\")*60;\n                            global.set(\"DelayOfCycle3\",0);\n                        }\n                        else\n                        {                    \n                            msg.topic = \"Pump Running...\";\n                        }\n                    break;\n                    // wait for delay between watering act and return to 0\n                    // increment step and alarm if problem\n                        \n                    case 2:  \n                        if (global.get(\"DelayOfCycle3\")==1)\n                        {\n                            global.set(\"SurveyStep3\", 0);\n                            global.set(\"CycleCount3\", global.get(\"CycleCount3\")+1);\n                            msg.topic = \"Survey Soil Moisture...\";                        \n                        }\n                        else\n                            msg.topic = \"Start Delay for next Watering...\";                 \n                    break;\n                }    \n            }\n            break;          \n        default:\n            break;\n                        \n    }\n}\nelse\n{\n    msg.topic = \"Wait for Zigbee2mqtt or stm32 activity...\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2820,
        "wires": [
            [
                "96f65a1781c36dc8",
                "2502bf7382c04404",
                "b88754b172f703e8"
            ]
        ]
    },
    {
        "id": "412a7ed5dedcb343",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "read attribut pump 1",
        "func": "var msg = {payload: {\"read\":{\"attributes\":[\"PlantWaterAlimentation3\",\"PlantWaterAlimentationState3\",\"TankLevel\"],\"cluster\":\"msTemperatureMeasurement\",\"options\":{}}}};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2960,
        "wires": [
            [
                "92ea094d49f4e57e"
            ]
        ]
    },
    {
        "id": "92ea094d49f4e57e",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "To Mqtt Set Activated",
        "mode": "link",
        "links": [
            "98bed3d7fb13f1ed"
        ],
        "x": 940,
        "y": 2960,
        "wires": [],
        "l": true
    },
    {
        "id": "ec81527728aa7a47",
        "type": "delay",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "Delay of cycle",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 3000,
        "wires": [
            [
                "37bc10835972341b"
            ]
        ]
    },
    {
        "id": "37bc10835972341b",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "DelayOfCycle3",
                "pt": "global",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "2502bf7382c04404",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "actions to realize",
        "func": "if (msg.wa!=\"\")\n{\n    msg.payload = msg.wa;\n    return [msg,];\n}\nif (msg.delay!=0)\n{\n    return [,msg];\n}\n\nreturn [,];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2880,
        "wires": [
            [
                "92ea094d49f4e57e"
            ],
            [
                "ec81527728aa7a47"
            ]
        ]
    },
    {
        "id": "db91f5438f4db4cd",
        "type": "switch",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "read pump if SurveyStep 3",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 2960,
        "wires": [
            [
                "412a7ed5dedcb343"
            ]
        ]
    },
    {
        "id": "134ef8f319f75d9e",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SurveyStep3",
        "payloadType": "global",
        "x": 180,
        "y": 2960,
        "wires": [
            [
                "db91f5438f4db4cd"
            ]
        ]
    },
    {
        "id": "6cf47a70ede1f947",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "group": "c5957db6516f003b",
        "order": 19,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Cycle number :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 2880,
        "wires": []
    },
    {
        "id": "b88754b172f703e8",
        "type": "change",
        "z": "b9d6d847700528fd",
        "g": "c4fe507b20390538",
        "name": "read CycleCount",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CycleCount3",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 2880,
        "wires": [
            [
                "6cf47a70ede1f947"
            ]
        ]
    },
    {
        "id": "b0789a4f738698b7",
        "type": "link in",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "path & value In from mqtt",
        "links": [
            "4ffad5a618a63e01",
            "c332c4c51bf2eada",
            "499cf92c5d9660b5",
            "5748ed39e3d6428b",
            "6f3e29da63d77bcf",
            "625d629758eecff9",
            "431a145392a41fd9",
            "74de3c4d94286c3e",
            "41f2919c371ec424",
            "37954604849ff7d8",
            "e3d2395558482740",
            "aadff2bcdcdd9704",
            "bda00c3fcb6b1372",
            "81c964379bdbe79b",
            "9f31466a408956af",
            "e7d312ac8cc882e7",
            "99ee838ff63a08ac",
            "aeec44aa6ab75b1d",
            "5c6a2e05d24298d2",
            "6130ca178c523c88",
            "201a1a7647db5c99",
            "dc32cba1deb891e6"
        ],
        "x": 170,
        "y": 3920,
        "wires": [
            [
                "0364f75ee9940bee"
            ]
        ],
        "l": true
    },
    {
        "id": "b425ca5cfaf4b7d7",
        "type": "mysql",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "mydb": "8274f0f80b2c3479",
        "name": "",
        "x": 470,
        "y": 3860,
        "wires": [
            [
                "4a0ba5bb23a9d262"
            ]
        ]
    },
    {
        "id": "3faa52b70ce23220",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "Read id of topic",
        "func": "msg.topic=\"SELECT IdTopics FROM topics WHERE PATH= '\"+msg.path+\"'\";\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3860,
        "wires": [
            [
                "b425ca5cfaf4b7d7"
            ]
        ]
    },
    {
        "id": "b984f87a3dc26dd0",
        "type": "inject",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "test inject",
        "props": [
            {
                "p": "value",
                "v": "224",
                "vt": "num"
            },
            {
                "p": "path",
                "v": "/test1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 3800,
        "wires": [
            [
                "3faa52b70ce23220"
            ]
        ]
    },
    {
        "id": "4a0ba5bb23a9d262",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "add topic if not exist",
        "func": "if (msg.payload.length ===0 ) {\n    msg.topic = \"INSERT INTO topics SET PATH= '\" + msg.path + \"'\";\n    return [msg,null];\n} \nelse \n{\n    return [null,msg];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 3860,
        "wires": [
            [
                "724288f79fa71e7d"
            ],
            [
                "a92230f5d0dd3211"
            ]
        ]
    },
    {
        "id": "724288f79fa71e7d",
        "type": "mysql",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "mydb": "8274f0f80b2c3479",
        "name": "",
        "x": 730,
        "y": 3800,
        "wires": [
            [
                "c58df9f7d6a898c2"
            ]
        ]
    },
    {
        "id": "a92230f5d0dd3211",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "write topic value",
        "func": "msg.topic = \"INSERT INTO data SET idtopics= \" + msg.payload[0].IdTopics+\" , value = \"+msg.value;\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 3860,
        "wires": [
            [
                "9fef4e676b7a4231"
            ]
        ]
    },
    {
        "id": "9fef4e676b7a4231",
        "type": "mysql",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "mydb": "8274f0f80b2c3479",
        "name": "",
        "x": 1110,
        "y": 3860,
        "wires": [
            []
        ]
    },
    {
        "id": "0364f75ee9940bee",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "fix path",
        "func": "msg.path = \"/stm32wb5mmg/\"+msg.path;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3920,
        "wires": [
            [
                "3faa52b70ce23220"
            ]
        ]
    },
    {
        "id": "4ffad5a618a63e01",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1570,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "c332c4c51bf2eada",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1690,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "1d534cfa3e9da7cf",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"LinkQuality\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 220,
        "wires": [
            [
                "1be9512d58ccdea0",
                "149d1109e57ff421"
            ]
        ]
    },
    {
        "id": "499cf92c5d9660b5",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1690,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "5748ed39e3d6428b",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1570,
        "y": 340,
        "wires": [],
        "l": true
    },
    {
        "id": "6f3e29da63d77bcf",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1690,
        "y": 420,
        "wires": [],
        "l": true
    },
    {
        "id": "625d629758eecff9",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1570,
        "y": 500,
        "wires": [],
        "l": true
    },
    {
        "id": "431a145392a41fd9",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1570,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "74de3c4d94286c3e",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1690,
        "y": 660,
        "wires": [],
        "l": true
    },
    {
        "id": "c58df9f7d6a898c2",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "name": "Read id of topic",
        "func": "msg.topic=\"SELECT IdTopics FROM topics WHERE PATH= '\"+msg.path+\"'\";\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 3800,
        "wires": [
            [
                "d638a990716c82f2"
            ]
        ]
    },
    {
        "id": "d638a990716c82f2",
        "type": "mysql",
        "z": "b9d6d847700528fd",
        "g": "503c91c9a72bc852",
        "mydb": "8274f0f80b2c3479",
        "name": "",
        "x": 1050,
        "y": 3800,
        "wires": [
            [
                "a92230f5d0dd3211"
            ]
        ]
    },
    {
        "id": "41f2919c371ec424",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1690,
        "y": 740,
        "wires": [],
        "l": true
    },
    {
        "id": "37954604849ff7d8",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1570,
        "y": 820,
        "wires": [],
        "l": true
    },
    {
        "id": "e3d2395558482740",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1570,
        "y": 900,
        "wires": [],
        "l": true
    },
    {
        "id": "aadff2bcdcdd9704",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 670,
        "y": 240,
        "wires": [],
        "l": true
    },
    {
        "id": "bda00c3fcb6b1372",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 790,
        "y": 320,
        "wires": [],
        "l": true
    },
    {
        "id": "9f31466a408956af",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 670,
        "y": 1200,
        "wires": [],
        "l": true
    },
    {
        "id": "e7d312ac8cc882e7",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 790,
        "y": 1260,
        "wires": [],
        "l": true
    },
    {
        "id": "149d1109e57ff421",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1570,
        "y": 260,
        "wires": [
            [
                "499cf92c5d9660b5"
            ]
        ]
    },
    {
        "id": "44e52f17cd86ea7c",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1570,
        "y": 660,
        "wires": [
            [
                "74de3c4d94286c3e"
            ]
        ]
    },
    {
        "id": "c74bf711fb9d9748",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1570,
        "y": 420,
        "wires": [
            [
                "6f3e29da63d77bcf"
            ]
        ]
    },
    {
        "id": "a2f8dce557ef290b",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1570,
        "y": 180,
        "wires": [
            [
                "c332c4c51bf2eada"
            ]
        ]
    },
    {
        "id": "fefe7e76ae131ca6",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "1315571ccb37045c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1570,
        "y": 740,
        "wires": [
            [
                "41f2919c371ec424"
            ]
        ]
    },
    {
        "id": "7e7cc566f9e6231b",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "a1bd53613da424d1",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 320,
        "wires": [
            [
                "bda00c3fcb6b1372"
            ]
        ]
    },
    {
        "id": "847b77fb72f57bcc",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "41257453b758372e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 1260,
        "wires": [
            [
                "e7d312ac8cc882e7"
            ]
        ]
    },
    {
        "id": "d806be4ea05b2683",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 550,
        "y": 3400,
        "wires": [
            [
                "201a1a7647db5c99"
            ]
        ]
    },
    {
        "id": "201a1a7647db5c99",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 670,
        "y": 3400,
        "wires": [],
        "l": true
    },
    {
        "id": "ee6f7815f5c8abc5",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "62a636a5e6353ed5",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1550,
        "y": 1960,
        "wires": [
            [
                "dc32cba1deb891e6"
            ]
        ]
    },
    {
        "id": "dc32cba1deb891e6",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "62a636a5e6353ed5",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 1670,
        "y": 1960,
        "wires": [],
        "l": true
    },
    {
        "id": "af180bef10ff4ec7",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "get temperature Plant 3",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantTemperature3",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 2160,
        "wires": [
            [
                "c84bc8588aa42db6"
            ]
        ]
    },
    {
        "id": "8578351f739426cb",
        "type": "ui_widget_thermometer",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "group": "c5957db6516f003b",
        "order": 1,
        "width": 6,
        "height": 6,
        "name": "Soil Temperature Plant 3",
        "title": "Soil Temperature",
        "numColor": 3,
        "colorTop": "#2196f3",
        "colorMiddle": "#8bc34a",
        "colorBottom": "#f44336",
        "unit": "°C",
        "scale": "normal",
        "minTemp": "-10",
        "maxTemp": "80",
        "minTempMoreThanMaxTemp": "1",
        "numberOfDecimals": "2",
        "showPercentage": "0",
        "currentTempFontSize": "1.2",
        "x": 910,
        "y": 2160,
        "wires": []
    },
    {
        "id": "c84bc8588aa42db6",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Plant/3/Temperature\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2160,
        "wires": [
            [
                "8578351f739426cb",
                "99ee838ff63a08ac"
            ]
        ]
    },
    {
        "id": "5c253c9f5d0d3f8f",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "get soil humidity Plant 3",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantSoilMoisture3",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 2220,
        "wires": [
            [
                "59891675149a5eb2"
            ]
        ]
    },
    {
        "id": "59891675149a5eb2",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "to numeric",
        "func": "msg.value = msg.payload;\nmsg.path = \"Plant/3/SoilMoisture\";\nmsg.payload = parseInt(msg.payload);\nglobal.set(\"SoilMoisture3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2220,
        "wires": [
            [
                "5d8c1b5ce0e6b3f7",
                "57daedd748f11b11"
            ]
        ]
    },
    {
        "id": "5d8c1b5ce0e6b3f7",
        "type": "ui_widget_humidity_tree",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "group": "c5957db6516f003b",
        "order": 2,
        "width": 6,
        "height": 6,
        "name": "Soil Moisture",
        "title": "Soil Moisture",
        "colorHumidMax": "#006000",
        "colorHumidMin": "#945818",
        "x": 950,
        "y": 2220,
        "wires": []
    },
    {
        "id": "07503a0eab969756",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "group": "c5957db6516f003b",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "MACDS Plant 3",
        "label": "MACDS Plant 3 :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 940,
        "y": 2280,
        "wires": []
    },
    {
        "id": "36b35033af56b5f6",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "get MACDS3",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantMACDS3",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 2280,
        "wires": [
            [
                "07503a0eab969756"
            ]
        ]
    },
    {
        "id": "ebdbea07e4a15959",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "get Water Alimentation 3",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantWaterAlimentation3",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 2340,
        "wires": [
            [
                "e2cea2baf3dff9eb"
            ]
        ]
    },
    {
        "id": "e6b2698366abd627",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "group": "c5957db6516f003b",
        "order": 5,
        "width": 7,
        "height": 1,
        "name": "WaterAlimentation Plant 3",
        "label": "Water Alim. Time Remaining in Ms :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 2340,
        "wires": []
    },
    {
        "id": "e2cea2baf3dff9eb",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "to numeric",
        "func": "var msg = {payload:Number(msg.payload)}\nglobal.set(\"WaterAlimentation3\", Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2340,
        "wires": [
            [
                "e6b2698366abd627"
            ]
        ]
    },
    {
        "id": "b3f62f67d3fb7a91",
        "type": "mqtt in",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "get Water Alimentation State 3",
        "topic": "zigbee2mqtt/STM32WB5MM-DK/PlantWaterAlimentationState3",
        "qos": "2",
        "datatype": "utf8",
        "broker": "b06087975a0e7478",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 2400,
        "wires": [
            [
                "b9a2cdb613411d04"
            ]
        ]
    },
    {
        "id": "35764cd92f398cbe",
        "type": "ui_text",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "group": "c5957db6516f003b",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "Water Pump State  Plant 3",
        "label": "Water Pump State  :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 2400,
        "wires": []
    },
    {
        "id": "b9a2cdb613411d04",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "to numeric",
        "func": "var val = Number(msg.payload);\nglobal.set(\"WaterAlimentationState3\",val);\nvar msg = {payload:(val==0)?'OFF':'ON',state: val}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2400,
        "wires": [
            [
                "35764cd92f398cbe"
            ]
        ]
    },
    {
        "id": "99ee838ff63a08ac",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 670,
        "y": 2180,
        "wires": [],
        "l": true
    },
    {
        "id": "aeec44aa6ab75b1d",
        "type": "link out",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "DB",
        "mode": "link",
        "links": [
            "b0789a4f738698b7"
        ],
        "x": 790,
        "y": 2240,
        "wires": [],
        "l": true
    },
    {
        "id": "57daedd748f11b11",
        "type": "rbe",
        "z": "b9d6d847700528fd",
        "g": "cee336c71a690199",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 2240,
        "wires": [
            [
                "aeec44aa6ab75b1d"
            ]
        ]
    },
    {
        "id": "17daee5d9bbda980",
        "type": "function",
        "z": "b9d6d847700528fd",
        "g": "9fa19268436c19ce",
        "name": "update LightAutomation",
        "func": "global.set(\"LightAutomation\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3440,
        "wires": [
            [
                "e24b521241219287"
            ]
        ]
    },
    {
        "id": "46f26d39074830ad",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "4f57f2418deb0d7b",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "582ef095c6851a63",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "9e31116dd310c695",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "462d3083b3c0b726",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "7b3aa470530ad183",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "629f5b30e2058f62",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "6a450d1b321eb56b",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 14,
        "width": 2,
        "height": 1
    },
    {
        "id": "e6d1fa550f273c18",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 15,
        "width": 7,
        "height": 1
    },
    {
        "id": "93e104db571542d9",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 17,
        "width": 26,
        "height": 1
    },
    {
        "id": "bed0699b9243b2e6",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 21,
        "width": 8,
        "height": 1
    },
    {
        "id": "5ab5add5b20e9089",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 22,
        "width": 8,
        "height": 1
    },
    {
        "id": "8767c51db1df7e44",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 23,
        "width": 8,
        "height": 1
    },
    {
        "id": "b5de9301f2c0d21a",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 24,
        "width": 8,
        "height": 1
    },
    {
        "id": "4abba6ba7ccb6327",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "85d76405d0f526d7",
        "order": 25,
        "width": 8,
        "height": 1
    },
    {
        "id": "b8177bfc76c8a6b8",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "fc7242200ea2b16b",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "c09920334e7043c9",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "f92c12e304fd27f3",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "fe801e0eb45efca5",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "57c4db1a2a5892b3",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "d111e67409d5f3bf",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 18,
        "width": 3,
        "height": 1
    },
    {
        "id": "f620c4358733eae8",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c4df573d69f7bde3",
        "order": 20,
        "width": 3,
        "height": 1
    },
    {
        "id": "dfc7d4bfa2fad284",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "9fa9298a109b4981",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "149e6ac237e6ed43",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "a249f0e806cb3f15",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "3d7b8fa2a17a4328",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "a27c5f531463391e",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "0240772174f1536f",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 18,
        "width": 3,
        "height": 1
    },
    {
        "id": "a5bebdcf7071a2c9",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "d5e9d849d4e0de52",
        "order": 20,
        "width": 3,
        "height": 1
    },
    {
        "id": "23022249fb0bc950",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "8237ea4dfd674fe4",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "47471ec11cbef190",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "8871b8deea508a98",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "ccfda01210d068e5",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "ce7ed0c9f503fccd",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "869e193b066d29ba",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 18,
        "width": 3,
        "height": 1
    },
    {
        "id": "4abb2a176f234ad2",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "c5957db6516f003b",
        "order": 20,
        "width": 3,
        "height": 1
    },
    {
        "id": "b790516c5d52dd25",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 7,
        "width": 11,
        "height": 1
    },
    {
        "id": "3928f2297dfd19ad",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "a1f0975a6225bb94",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "13de7b58c4574ac4",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 14,
        "width": 2,
        "height": 1
    },
    {
        "id": "5a083e940b72d5d2",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 15,
        "width": 19,
        "height": 1
    },
    {
        "id": "10acd1d28ba8284a",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 16,
        "width": 19,
        "height": 1
    },
    {
        "id": "57f1b95d17109e90",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 17,
        "width": 19,
        "height": 1
    },
    {
        "id": "7040563ca90ed956",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 19,
        "width": 8,
        "height": 1
    },
    {
        "id": "c387d78c91843afb",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 22,
        "width": 7,
        "height": 1
    },
    {
        "id": "2475e2c2cbd702f5",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 26,
        "width": 3,
        "height": 1
    },
    {
        "id": "3878d6af650277aa",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 28,
        "width": 12,
        "height": 1
    },
    {
        "id": "88b464f42ba07883",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 29,
        "width": 12,
        "height": 1
    },
    {
        "id": "f61a2611af1a1fe2",
        "type": "ui_spacer",
        "z": "b9d6d847700528fd",
        "name": "spacer",
        "group": "ddb5dd88e80aa0b2",
        "order": 30,
        "width": 12,
        "height": 1
    },
    {
        "id": "b06087975a0e7478",
        "type": "mqtt-broker",
        "name": "Mqtt vps1",
        "broker": "mqtt://xxx.xxx.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ddb5dd88e80aa0b2",
        "type": "ui_group",
        "name": "stm32wb5mmg-dk",
        "tab": "e14973f4b04b6027",
        "order": 1,
        "disp": false,
        "width": 23,
        "collapse": false,
        "className": ""
    },
    {
        "id": "85d76405d0f526d7",
        "type": "ui_group",
        "name": "group pollution",
        "tab": "93f73afd50f96fad",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c4df573d69f7bde3",
        "type": "ui_group",
        "name": "Measuring Plant 1",
        "tab": "0366b26ebc90e215",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5e9d849d4e0de52",
        "type": "ui_group",
        "name": "Measuring Plant 2",
        "tab": "0366b26ebc90e215",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5957db6516f003b",
        "type": "ui_group",
        "name": "Measuring Plant 3",
        "tab": "0366b26ebc90e215",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8274f0f80b2c3479",
        "type": "MySQLdatabase",
        "name": "vps1",
        "host": "localhost",
        "port": "3306",
        "db": "nodered",
        "tz": "+01:00",
        "charset": "UTF8"
    },
    {
        "id": "e14973f4b04b6027",
        "type": "ui_tab",
        "name": "General Information",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "93f73afd50f96fad",
        "type": "ui_tab",
        "name": "Pollution",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0366b26ebc90e215",
        "type": "ui_tab",
        "name": "Plants",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]